
Advanced_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00001f20  00001fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800190  00800190  000020e4  2**0
                  ALLOC
  3 .stab         00001c74  00000000  00000000  000020e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000102d  00000000  00000000  00003d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001af  00000000  00000000  00004ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020dc  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011c0  00000000  00000000  00007170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000105e  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009390  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002de  00000000  00000000  00009510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095e  00000000  00000000  000097ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <main>
      8a:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_fpadd_parts>:
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__prologue_saves__>
      9e:	dc 01       	movw	r26, r24
      a0:	2b 01       	movw	r4, r22
      a2:	fa 01       	movw	r30, r20
      a4:	9c 91       	ld	r25, X
      a6:	92 30       	cpi	r25, 0x02	; 2
      a8:	08 f4       	brcc	.+2      	; 0xac <_fpadd_parts+0x1a>
      aa:	39 c1       	rjmp	.+626    	; 0x31e <_fpadd_parts+0x28c>
      ac:	eb 01       	movw	r28, r22
      ae:	88 81       	ld	r24, Y
      b0:	82 30       	cpi	r24, 0x02	; 2
      b2:	08 f4       	brcc	.+2      	; 0xb6 <_fpadd_parts+0x24>
      b4:	33 c1       	rjmp	.+614    	; 0x31c <_fpadd_parts+0x28a>
      b6:	94 30       	cpi	r25, 0x04	; 4
      b8:	69 f4       	brne	.+26     	; 0xd4 <_fpadd_parts+0x42>
      ba:	84 30       	cpi	r24, 0x04	; 4
      bc:	09 f0       	breq	.+2      	; 0xc0 <_fpadd_parts+0x2e>
      be:	2f c1       	rjmp	.+606    	; 0x31e <_fpadd_parts+0x28c>
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	9c 91       	ld	r25, X
      c4:	11 97       	sbiw	r26, 0x01	; 1
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	98 17       	cp	r25, r24
      ca:	09 f4       	brne	.+2      	; 0xce <_fpadd_parts+0x3c>
      cc:	28 c1       	rjmp	.+592    	; 0x31e <_fpadd_parts+0x28c>
      ce:	a8 e7       	ldi	r26, 0x78	; 120
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	25 c1       	rjmp	.+586    	; 0x31e <_fpadd_parts+0x28c>
      d4:	84 30       	cpi	r24, 0x04	; 4
      d6:	09 f4       	brne	.+2      	; 0xda <_fpadd_parts+0x48>
      d8:	21 c1       	rjmp	.+578    	; 0x31c <_fpadd_parts+0x28a>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a9 f4       	brne	.+42     	; 0x108 <_fpadd_parts+0x76>
      de:	92 30       	cpi	r25, 0x02	; 2
      e0:	09 f0       	breq	.+2      	; 0xe4 <_fpadd_parts+0x52>
      e2:	1d c1       	rjmp	.+570    	; 0x31e <_fpadd_parts+0x28c>
      e4:	9a 01       	movw	r18, r20
      e6:	ad 01       	movw	r20, r26
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	ea 01       	movw	r28, r20
      ec:	09 90       	ld	r0, Y+
      ee:	ae 01       	movw	r20, r28
      f0:	e9 01       	movw	r28, r18
      f2:	09 92       	st	Y+, r0
      f4:	9e 01       	movw	r18, r28
      f6:	81 50       	subi	r24, 0x01	; 1
      f8:	c1 f7       	brne	.-16     	; 0xea <_fpadd_parts+0x58>
      fa:	e2 01       	movw	r28, r4
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	9c 91       	ld	r25, X
     102:	89 23       	and	r24, r25
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	08 c1       	rjmp	.+528    	; 0x318 <_fpadd_parts+0x286>
     108:	92 30       	cpi	r25, 0x02	; 2
     10a:	09 f4       	brne	.+2      	; 0x10e <_fpadd_parts+0x7c>
     10c:	07 c1       	rjmp	.+526    	; 0x31c <_fpadd_parts+0x28a>
     10e:	12 96       	adiw	r26, 0x02	; 2
     110:	2d 90       	ld	r2, X+
     112:	3c 90       	ld	r3, X
     114:	13 97       	sbiw	r26, 0x03	; 3
     116:	eb 01       	movw	r28, r22
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	14 96       	adiw	r26, 0x04	; 4
     11e:	ad 90       	ld	r10, X+
     120:	bd 90       	ld	r11, X+
     122:	cd 90       	ld	r12, X+
     124:	dc 90       	ld	r13, X
     126:	17 97       	sbiw	r26, 0x07	; 7
     128:	ec 80       	ldd	r14, Y+4	; 0x04
     12a:	fd 80       	ldd	r15, Y+5	; 0x05
     12c:	0e 81       	ldd	r16, Y+6	; 0x06
     12e:	1f 81       	ldd	r17, Y+7	; 0x07
     130:	91 01       	movw	r18, r2
     132:	28 1b       	sub	r18, r24
     134:	39 0b       	sbc	r19, r25
     136:	b9 01       	movw	r22, r18
     138:	37 ff       	sbrs	r19, 7
     13a:	04 c0       	rjmp	.+8      	; 0x144 <_fpadd_parts+0xb2>
     13c:	66 27       	eor	r22, r22
     13e:	77 27       	eor	r23, r23
     140:	62 1b       	sub	r22, r18
     142:	73 0b       	sbc	r23, r19
     144:	60 32       	cpi	r22, 0x20	; 32
     146:	71 05       	cpc	r23, r1
     148:	0c f0       	brlt	.+2      	; 0x14c <_fpadd_parts+0xba>
     14a:	61 c0       	rjmp	.+194    	; 0x20e <_fpadd_parts+0x17c>
     14c:	12 16       	cp	r1, r18
     14e:	13 06       	cpc	r1, r19
     150:	6c f5       	brge	.+90     	; 0x1ac <_fpadd_parts+0x11a>
     152:	37 01       	movw	r6, r14
     154:	48 01       	movw	r8, r16
     156:	06 2e       	mov	r0, r22
     158:	04 c0       	rjmp	.+8      	; 0x162 <_fpadd_parts+0xd0>
     15a:	96 94       	lsr	r9
     15c:	87 94       	ror	r8
     15e:	77 94       	ror	r7
     160:	67 94       	ror	r6
     162:	0a 94       	dec	r0
     164:	d2 f7       	brpl	.-12     	; 0x15a <_fpadd_parts+0xc8>
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	04 c0       	rjmp	.+8      	; 0x178 <_fpadd_parts+0xe6>
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	44 1f       	adc	r20, r20
     176:	55 1f       	adc	r21, r21
     178:	6a 95       	dec	r22
     17a:	d2 f7       	brpl	.-12     	; 0x170 <_fpadd_parts+0xde>
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	30 40       	sbci	r19, 0x00	; 0
     180:	40 40       	sbci	r20, 0x00	; 0
     182:	50 40       	sbci	r21, 0x00	; 0
     184:	2e 21       	and	r18, r14
     186:	3f 21       	and	r19, r15
     188:	40 23       	and	r20, r16
     18a:	51 23       	and	r21, r17
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	41 05       	cpc	r20, r1
     192:	51 05       	cpc	r21, r1
     194:	21 f0       	breq	.+8      	; 0x19e <_fpadd_parts+0x10c>
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	79 01       	movw	r14, r18
     1a0:	8a 01       	movw	r16, r20
     1a2:	e6 28       	or	r14, r6
     1a4:	f7 28       	or	r15, r7
     1a6:	08 29       	or	r16, r8
     1a8:	19 29       	or	r17, r9
     1aa:	3c c0       	rjmp	.+120    	; 0x224 <_fpadd_parts+0x192>
     1ac:	23 2b       	or	r18, r19
     1ae:	d1 f1       	breq	.+116    	; 0x224 <_fpadd_parts+0x192>
     1b0:	26 0e       	add	r2, r22
     1b2:	37 1e       	adc	r3, r23
     1b4:	35 01       	movw	r6, r10
     1b6:	46 01       	movw	r8, r12
     1b8:	06 2e       	mov	r0, r22
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0x132>
     1bc:	96 94       	lsr	r9
     1be:	87 94       	ror	r8
     1c0:	77 94       	ror	r7
     1c2:	67 94       	ror	r6
     1c4:	0a 94       	dec	r0
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0x12a>
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <_fpadd_parts+0x148>
     1d2:	22 0f       	add	r18, r18
     1d4:	33 1f       	adc	r19, r19
     1d6:	44 1f       	adc	r20, r20
     1d8:	55 1f       	adc	r21, r21
     1da:	6a 95       	dec	r22
     1dc:	d2 f7       	brpl	.-12     	; 0x1d2 <_fpadd_parts+0x140>
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	30 40       	sbci	r19, 0x00	; 0
     1e2:	40 40       	sbci	r20, 0x00	; 0
     1e4:	50 40       	sbci	r21, 0x00	; 0
     1e6:	2a 21       	and	r18, r10
     1e8:	3b 21       	and	r19, r11
     1ea:	4c 21       	and	r20, r12
     1ec:	5d 21       	and	r21, r13
     1ee:	21 15       	cp	r18, r1
     1f0:	31 05       	cpc	r19, r1
     1f2:	41 05       	cpc	r20, r1
     1f4:	51 05       	cpc	r21, r1
     1f6:	21 f0       	breq	.+8      	; 0x200 <_fpadd_parts+0x16e>
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	59 01       	movw	r10, r18
     202:	6a 01       	movw	r12, r20
     204:	a6 28       	or	r10, r6
     206:	b7 28       	or	r11, r7
     208:	c8 28       	or	r12, r8
     20a:	d9 28       	or	r13, r9
     20c:	0b c0       	rjmp	.+22     	; 0x224 <_fpadd_parts+0x192>
     20e:	82 15       	cp	r24, r2
     210:	93 05       	cpc	r25, r3
     212:	2c f0       	brlt	.+10     	; 0x21e <_fpadd_parts+0x18c>
     214:	1c 01       	movw	r2, r24
     216:	aa 24       	eor	r10, r10
     218:	bb 24       	eor	r11, r11
     21a:	65 01       	movw	r12, r10
     21c:	03 c0       	rjmp	.+6      	; 0x224 <_fpadd_parts+0x192>
     21e:	ee 24       	eor	r14, r14
     220:	ff 24       	eor	r15, r15
     222:	87 01       	movw	r16, r14
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	9c 91       	ld	r25, X
     228:	d2 01       	movw	r26, r4
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	8c 91       	ld	r24, X
     22e:	98 17       	cp	r25, r24
     230:	09 f4       	brne	.+2      	; 0x234 <_fpadd_parts+0x1a2>
     232:	45 c0       	rjmp	.+138    	; 0x2be <_fpadd_parts+0x22c>
     234:	99 23       	and	r25, r25
     236:	39 f0       	breq	.+14     	; 0x246 <_fpadd_parts+0x1b4>
     238:	a8 01       	movw	r20, r16
     23a:	97 01       	movw	r18, r14
     23c:	2a 19       	sub	r18, r10
     23e:	3b 09       	sbc	r19, r11
     240:	4c 09       	sbc	r20, r12
     242:	5d 09       	sbc	r21, r13
     244:	06 c0       	rjmp	.+12     	; 0x252 <_fpadd_parts+0x1c0>
     246:	a6 01       	movw	r20, r12
     248:	95 01       	movw	r18, r10
     24a:	2e 19       	sub	r18, r14
     24c:	3f 09       	sbc	r19, r15
     24e:	40 0b       	sbc	r20, r16
     250:	51 0b       	sbc	r21, r17
     252:	57 fd       	sbrc	r21, 7
     254:	08 c0       	rjmp	.+16     	; 0x266 <_fpadd_parts+0x1d4>
     256:	11 82       	std	Z+1, r1	; 0x01
     258:	33 82       	std	Z+3, r3	; 0x03
     25a:	22 82       	std	Z+2, r2	; 0x02
     25c:	24 83       	std	Z+4, r18	; 0x04
     25e:	35 83       	std	Z+5, r19	; 0x05
     260:	46 83       	std	Z+6, r20	; 0x06
     262:	57 83       	std	Z+7, r21	; 0x07
     264:	1d c0       	rjmp	.+58     	; 0x2a0 <_fpadd_parts+0x20e>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	33 82       	std	Z+3, r3	; 0x03
     26c:	22 82       	std	Z+2, r2	; 0x02
     26e:	88 27       	eor	r24, r24
     270:	99 27       	eor	r25, r25
     272:	dc 01       	movw	r26, r24
     274:	82 1b       	sub	r24, r18
     276:	93 0b       	sbc	r25, r19
     278:	a4 0b       	sbc	r26, r20
     27a:	b5 0b       	sbc	r27, r21
     27c:	84 83       	std	Z+4, r24	; 0x04
     27e:	95 83       	std	Z+5, r25	; 0x05
     280:	a6 83       	std	Z+6, r26	; 0x06
     282:	b7 83       	std	Z+7, r27	; 0x07
     284:	0d c0       	rjmp	.+26     	; 0x2a0 <_fpadd_parts+0x20e>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	44 1f       	adc	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	24 83       	std	Z+4, r18	; 0x04
     290:	35 83       	std	Z+5, r19	; 0x05
     292:	46 83       	std	Z+6, r20	; 0x06
     294:	57 83       	std	Z+7, r21	; 0x07
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	93 83       	std	Z+3, r25	; 0x03
     29e:	82 83       	std	Z+2, r24	; 0x02
     2a0:	24 81       	ldd	r18, Z+4	; 0x04
     2a2:	35 81       	ldd	r19, Z+5	; 0x05
     2a4:	46 81       	ldd	r20, Z+6	; 0x06
     2a6:	57 81       	ldd	r21, Z+7	; 0x07
     2a8:	da 01       	movw	r26, r20
     2aa:	c9 01       	movw	r24, r18
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	a1 09       	sbc	r26, r1
     2b0:	b1 09       	sbc	r27, r1
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	af 4f       	sbci	r26, 0xFF	; 255
     2b8:	bf 43       	sbci	r27, 0x3F	; 63
     2ba:	28 f3       	brcs	.-54     	; 0x286 <_fpadd_parts+0x1f4>
     2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <_fpadd_parts+0x242>
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	33 82       	std	Z+3, r3	; 0x03
     2c2:	22 82       	std	Z+2, r2	; 0x02
     2c4:	ea 0c       	add	r14, r10
     2c6:	fb 1c       	adc	r15, r11
     2c8:	0c 1d       	adc	r16, r12
     2ca:	1d 1d       	adc	r17, r13
     2cc:	e4 82       	std	Z+4, r14	; 0x04
     2ce:	f5 82       	std	Z+5, r15	; 0x05
     2d0:	06 83       	std	Z+6, r16	; 0x06
     2d2:	17 83       	std	Z+7, r17	; 0x07
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 83       	st	Z, r24
     2d8:	24 81       	ldd	r18, Z+4	; 0x04
     2da:	35 81       	ldd	r19, Z+5	; 0x05
     2dc:	46 81       	ldd	r20, Z+6	; 0x06
     2de:	57 81       	ldd	r21, Z+7	; 0x07
     2e0:	57 ff       	sbrs	r21, 7
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <_fpadd_parts+0x286>
     2e4:	c9 01       	movw	r24, r18
     2e6:	aa 27       	eor	r26, r26
     2e8:	97 fd       	sbrc	r25, 7
     2ea:	a0 95       	com	r26
     2ec:	ba 2f       	mov	r27, r26
     2ee:	81 70       	andi	r24, 0x01	; 1
     2f0:	90 70       	andi	r25, 0x00	; 0
     2f2:	a0 70       	andi	r26, 0x00	; 0
     2f4:	b0 70       	andi	r27, 0x00	; 0
     2f6:	56 95       	lsr	r21
     2f8:	47 95       	ror	r20
     2fa:	37 95       	ror	r19
     2fc:	27 95       	ror	r18
     2fe:	82 2b       	or	r24, r18
     300:	93 2b       	or	r25, r19
     302:	a4 2b       	or	r26, r20
     304:	b5 2b       	or	r27, r21
     306:	84 83       	std	Z+4, r24	; 0x04
     308:	95 83       	std	Z+5, r25	; 0x05
     30a:	a6 83       	std	Z+6, r26	; 0x06
     30c:	b7 83       	std	Z+7, r27	; 0x07
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
     318:	df 01       	movw	r26, r30
     31a:	01 c0       	rjmp	.+2      	; 0x31e <_fpadd_parts+0x28c>
     31c:	d2 01       	movw	r26, r4
     31e:	cd 01       	movw	r24, r26
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	e2 e1       	ldi	r30, 0x12	; 18
     326:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__epilogue_restores__>

0000032a <__subsf3>:
     32a:	a0 e2       	ldi	r26, 0x20	; 32
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	eb e9       	ldi	r30, 0x9B	; 155
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__+0x18>
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	2d 83       	std	Y+5, r18	; 0x05
     340:	3e 83       	std	Y+6, r19	; 0x06
     342:	4f 83       	std	Y+7, r20	; 0x07
     344:	58 87       	std	Y+8, r21	; 0x08
     346:	e9 e0       	ldi	r30, 0x09	; 9
     348:	ee 2e       	mov	r14, r30
     34a:	f1 2c       	mov	r15, r1
     34c:	ec 0e       	add	r14, r28
     34e:	fd 1e       	adc	r15, r29
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	b7 01       	movw	r22, r14
     356:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     35a:	8e 01       	movw	r16, r28
     35c:	0f 5e       	subi	r16, 0xEF	; 239
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	ce 01       	movw	r24, r28
     362:	05 96       	adiw	r24, 0x05	; 5
     364:	b8 01       	movw	r22, r16
     366:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     36a:	8a 89       	ldd	r24, Y+18	; 0x12
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	89 27       	eor	r24, r25
     370:	8a 8b       	std	Y+18, r24	; 0x12
     372:	c7 01       	movw	r24, r14
     374:	b8 01       	movw	r22, r16
     376:	ae 01       	movw	r20, r28
     378:	47 5e       	subi	r20, 0xE7	; 231
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     380:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__pack_f>
     384:	a0 96       	adiw	r28, 0x20	; 32
     386:	e6 e0       	ldi	r30, 0x06	; 6
     388:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__+0x18>

0000038c <__addsf3>:
     38c:	a0 e2       	ldi	r26, 0x20	; 32
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	ec ec       	ldi	r30, 0xCC	; 204
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__+0x18>
     398:	69 83       	std	Y+1, r22	; 0x01
     39a:	7a 83       	std	Y+2, r23	; 0x02
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	2d 83       	std	Y+5, r18	; 0x05
     3a2:	3e 83       	std	Y+6, r19	; 0x06
     3a4:	4f 83       	std	Y+7, r20	; 0x07
     3a6:	58 87       	std	Y+8, r21	; 0x08
     3a8:	f9 e0       	ldi	r31, 0x09	; 9
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	ec 0e       	add	r14, r28
     3b0:	fd 1e       	adc	r15, r29
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5e       	subi	r16, 0xEF	; 239
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	ce 01       	movw	r24, r28
     3c4:	05 96       	adiw	r24, 0x05	; 5
     3c6:	b8 01       	movw	r22, r16
     3c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     3cc:	c7 01       	movw	r24, r14
     3ce:	b8 01       	movw	r22, r16
     3d0:	ae 01       	movw	r20, r28
     3d2:	47 5e       	subi	r20, 0xE7	; 231
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     3da:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__pack_f>
     3de:	a0 96       	adiw	r28, 0x20	; 32
     3e0:	e6 e0       	ldi	r30, 0x06	; 6
     3e2:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__+0x18>

000003e6 <__mulsf3>:
     3e6:	a0 e2       	ldi	r26, 0x20	; 32
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e9 ef       	ldi	r30, 0xF9	; 249
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__prologue_saves__>
     3f2:	69 83       	std	Y+1, r22	; 0x01
     3f4:	7a 83       	std	Y+2, r23	; 0x02
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	2d 83       	std	Y+5, r18	; 0x05
     3fc:	3e 83       	std	Y+6, r19	; 0x06
     3fe:	4f 83       	std	Y+7, r20	; 0x07
     400:	58 87       	std	Y+8, r21	; 0x08
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	be 01       	movw	r22, r28
     408:	67 5f       	subi	r22, 0xF7	; 247
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     410:	ce 01       	movw	r24, r28
     412:	05 96       	adiw	r24, 0x05	; 5
     414:	be 01       	movw	r22, r28
     416:	6f 5e       	subi	r22, 0xEF	; 239
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     41e:	99 85       	ldd	r25, Y+9	; 0x09
     420:	92 30       	cpi	r25, 0x02	; 2
     422:	88 f0       	brcs	.+34     	; 0x446 <__mulsf3+0x60>
     424:	89 89       	ldd	r24, Y+17	; 0x11
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	c8 f0       	brcs	.+50     	; 0x45c <__mulsf3+0x76>
     42a:	94 30       	cpi	r25, 0x04	; 4
     42c:	19 f4       	brne	.+6      	; 0x434 <__mulsf3+0x4e>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	51 f4       	brne	.+20     	; 0x446 <__mulsf3+0x60>
     432:	04 c0       	rjmp	.+8      	; 0x43c <__mulsf3+0x56>
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	29 f4       	brne	.+10     	; 0x442 <__mulsf3+0x5c>
     438:	92 30       	cpi	r25, 0x02	; 2
     43a:	81 f4       	brne	.+32     	; 0x45c <__mulsf3+0x76>
     43c:	88 e7       	ldi	r24, 0x78	; 120
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	c6 c0       	rjmp	.+396    	; 0x5ce <__mulsf3+0x1e8>
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	49 f4       	brne	.+18     	; 0x458 <__mulsf3+0x72>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	9a 85       	ldd	r25, Y+10	; 0x0a
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	98 13       	cpse	r25, r24
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	2a 87       	std	Y+10, r18	; 0x0a
     452:	ce 01       	movw	r24, r28
     454:	09 96       	adiw	r24, 0x09	; 9
     456:	bb c0       	rjmp	.+374    	; 0x5ce <__mulsf3+0x1e8>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	49 f4       	brne	.+18     	; 0x46e <__mulsf3+0x88>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	9a 85       	ldd	r25, Y+10	; 0x0a
     460:	8a 89       	ldd	r24, Y+18	; 0x12
     462:	98 13       	cpse	r25, r24
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	2a 8b       	std	Y+18, r18	; 0x12
     468:	ce 01       	movw	r24, r28
     46a:	41 96       	adiw	r24, 0x11	; 17
     46c:	b0 c0       	rjmp	.+352    	; 0x5ce <__mulsf3+0x1e8>
     46e:	2d 84       	ldd	r2, Y+13	; 0x0d
     470:	3e 84       	ldd	r3, Y+14	; 0x0e
     472:	4f 84       	ldd	r4, Y+15	; 0x0f
     474:	58 88       	ldd	r5, Y+16	; 0x10
     476:	6d 88       	ldd	r6, Y+21	; 0x15
     478:	7e 88       	ldd	r7, Y+22	; 0x16
     47a:	8f 88       	ldd	r8, Y+23	; 0x17
     47c:	98 8c       	ldd	r9, Y+24	; 0x18
     47e:	ee 24       	eor	r14, r14
     480:	ff 24       	eor	r15, r15
     482:	87 01       	movw	r16, r14
     484:	aa 24       	eor	r10, r10
     486:	bb 24       	eor	r11, r11
     488:	65 01       	movw	r12, r10
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	e0 e0       	ldi	r30, 0x00	; 0
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	c1 01       	movw	r24, r2
     498:	81 70       	andi	r24, 0x01	; 1
     49a:	90 70       	andi	r25, 0x00	; 0
     49c:	89 2b       	or	r24, r25
     49e:	e9 f0       	breq	.+58     	; 0x4da <__mulsf3+0xf4>
     4a0:	e6 0c       	add	r14, r6
     4a2:	f7 1c       	adc	r15, r7
     4a4:	08 1d       	adc	r16, r8
     4a6:	19 1d       	adc	r17, r9
     4a8:	9a 01       	movw	r18, r20
     4aa:	ab 01       	movw	r20, r22
     4ac:	2a 0d       	add	r18, r10
     4ae:	3b 1d       	adc	r19, r11
     4b0:	4c 1d       	adc	r20, r12
     4b2:	5d 1d       	adc	r21, r13
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e6 14       	cp	r14, r6
     4be:	f7 04       	cpc	r15, r7
     4c0:	08 05       	cpc	r16, r8
     4c2:	19 05       	cpc	r17, r9
     4c4:	20 f4       	brcc	.+8      	; 0x4ce <__mulsf3+0xe8>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	a0 e0       	ldi	r26, 0x00	; 0
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	ba 01       	movw	r22, r20
     4d0:	a9 01       	movw	r20, r18
     4d2:	48 0f       	add	r20, r24
     4d4:	59 1f       	adc	r21, r25
     4d6:	6a 1f       	adc	r22, r26
     4d8:	7b 1f       	adc	r23, r27
     4da:	aa 0c       	add	r10, r10
     4dc:	bb 1c       	adc	r11, r11
     4de:	cc 1c       	adc	r12, r12
     4e0:	dd 1c       	adc	r13, r13
     4e2:	97 fe       	sbrs	r9, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <__mulsf3+0x110>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	a8 2a       	or	r10, r24
     4f0:	b9 2a       	or	r11, r25
     4f2:	ca 2a       	or	r12, r26
     4f4:	db 2a       	or	r13, r27
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	e0 32       	cpi	r30, 0x20	; 32
     4fa:	f1 05       	cpc	r31, r1
     4fc:	49 f0       	breq	.+18     	; 0x510 <__mulsf3+0x12a>
     4fe:	66 0c       	add	r6, r6
     500:	77 1c       	adc	r7, r7
     502:	88 1c       	adc	r8, r8
     504:	99 1c       	adc	r9, r9
     506:	56 94       	lsr	r5
     508:	47 94       	ror	r4
     50a:	37 94       	ror	r3
     50c:	27 94       	ror	r2
     50e:	c3 cf       	rjmp	.-122    	; 0x496 <__mulsf3+0xb0>
     510:	fa 85       	ldd	r31, Y+10	; 0x0a
     512:	ea 89       	ldd	r30, Y+18	; 0x12
     514:	2b 89       	ldd	r18, Y+19	; 0x13
     516:	3c 89       	ldd	r19, Y+20	; 0x14
     518:	8b 85       	ldd	r24, Y+11	; 0x0b
     51a:	9c 85       	ldd	r25, Y+12	; 0x0c
     51c:	28 0f       	add	r18, r24
     51e:	39 1f       	adc	r19, r25
     520:	2e 5f       	subi	r18, 0xFE	; 254
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	17 c0       	rjmp	.+46     	; 0x554 <__mulsf3+0x16e>
     526:	ca 01       	movw	r24, r20
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	61 f0       	breq	.+24     	; 0x548 <__mulsf3+0x162>
     530:	16 95       	lsr	r17
     532:	07 95       	ror	r16
     534:	f7 94       	ror	r15
     536:	e7 94       	ror	r14
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b0 e8       	ldi	r27, 0x80	; 128
     540:	e8 2a       	or	r14, r24
     542:	f9 2a       	or	r15, r25
     544:	0a 2b       	or	r16, r26
     546:	1b 2b       	or	r17, r27
     548:	76 95       	lsr	r23
     54a:	67 95       	ror	r22
     54c:	57 95       	ror	r21
     54e:	47 95       	ror	r20
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	77 fd       	sbrc	r23, 7
     556:	e7 cf       	rjmp	.-50     	; 0x526 <__mulsf3+0x140>
     558:	0c c0       	rjmp	.+24     	; 0x572 <__mulsf3+0x18c>
     55a:	44 0f       	add	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	66 1f       	adc	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	17 fd       	sbrc	r17, 7
     564:	41 60       	ori	r20, 0x01	; 1
     566:	ee 0c       	add	r14, r14
     568:	ff 1c       	adc	r15, r15
     56a:	00 1f       	adc	r16, r16
     56c:	11 1f       	adc	r17, r17
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	30 40       	sbci	r19, 0x00	; 0
     572:	40 30       	cpi	r20, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	59 07       	cpc	r21, r25
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	69 07       	cpc	r22, r25
     57c:	90 e4       	ldi	r25, 0x40	; 64
     57e:	79 07       	cpc	r23, r25
     580:	60 f3       	brcs	.-40     	; 0x55a <__mulsf3+0x174>
     582:	2b 8f       	std	Y+27, r18	; 0x1b
     584:	3c 8f       	std	Y+28, r19	; 0x1c
     586:	db 01       	movw	r26, r22
     588:	ca 01       	movw	r24, r20
     58a:	8f 77       	andi	r24, 0x7F	; 127
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	a0 70       	andi	r26, 0x00	; 0
     590:	b0 70       	andi	r27, 0x00	; 0
     592:	80 34       	cpi	r24, 0x40	; 64
     594:	91 05       	cpc	r25, r1
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	61 f4       	brne	.+24     	; 0x5b4 <__mulsf3+0x1ce>
     59c:	47 fd       	sbrc	r20, 7
     59e:	0a c0       	rjmp	.+20     	; 0x5b4 <__mulsf3+0x1ce>
     5a0:	e1 14       	cp	r14, r1
     5a2:	f1 04       	cpc	r15, r1
     5a4:	01 05       	cpc	r16, r1
     5a6:	11 05       	cpc	r17, r1
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <__mulsf3+0x1ce>
     5aa:	40 5c       	subi	r20, 0xC0	; 192
     5ac:	5f 4f       	sbci	r21, 0xFF	; 255
     5ae:	6f 4f       	sbci	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	40 78       	andi	r20, 0x80	; 128
     5b4:	1a 8e       	std	Y+26, r1	; 0x1a
     5b6:	fe 17       	cp	r31, r30
     5b8:	11 f0       	breq	.+4      	; 0x5be <__mulsf3+0x1d8>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	8a 8f       	std	Y+26, r24	; 0x1a
     5be:	4d 8f       	std	Y+29, r20	; 0x1d
     5c0:	5e 8f       	std	Y+30, r21	; 0x1e
     5c2:	6f 8f       	std	Y+31, r22	; 0x1f
     5c4:	78 a3       	std	Y+32, r23	; 0x20
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	89 8f       	std	Y+25, r24	; 0x19
     5ca:	ce 01       	movw	r24, r28
     5cc:	49 96       	adiw	r24, 0x19	; 25
     5ce:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__pack_f>
     5d2:	a0 96       	adiw	r28, 0x20	; 32
     5d4:	e2 e1       	ldi	r30, 0x12	; 18
     5d6:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__epilogue_restores__>

000005da <__divsf3>:
     5da:	a8 e1       	ldi	r26, 0x18	; 24
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e3 ef       	ldi	r30, 0xF3	; 243
     5e0:	f2 e0       	ldi	r31, 0x02	; 2
     5e2:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__+0x10>
     5e6:	69 83       	std	Y+1, r22	; 0x01
     5e8:	7a 83       	std	Y+2, r23	; 0x02
     5ea:	8b 83       	std	Y+3, r24	; 0x03
     5ec:	9c 83       	std	Y+4, r25	; 0x04
     5ee:	2d 83       	std	Y+5, r18	; 0x05
     5f0:	3e 83       	std	Y+6, r19	; 0x06
     5f2:	4f 83       	std	Y+7, r20	; 0x07
     5f4:	58 87       	std	Y+8, r21	; 0x08
     5f6:	b9 e0       	ldi	r27, 0x09	; 9
     5f8:	eb 2e       	mov	r14, r27
     5fa:	f1 2c       	mov	r15, r1
     5fc:	ec 0e       	add	r14, r28
     5fe:	fd 1e       	adc	r15, r29
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	b7 01       	movw	r22, r14
     606:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     60a:	8e 01       	movw	r16, r28
     60c:	0f 5e       	subi	r16, 0xEF	; 239
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	ce 01       	movw	r24, r28
     612:	05 96       	adiw	r24, 0x05	; 5
     614:	b8 01       	movw	r22, r16
     616:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     61a:	29 85       	ldd	r18, Y+9	; 0x09
     61c:	22 30       	cpi	r18, 0x02	; 2
     61e:	08 f4       	brcc	.+2      	; 0x622 <__divsf3+0x48>
     620:	7e c0       	rjmp	.+252    	; 0x71e <__divsf3+0x144>
     622:	39 89       	ldd	r19, Y+17	; 0x11
     624:	32 30       	cpi	r19, 0x02	; 2
     626:	10 f4       	brcc	.+4      	; 0x62c <__divsf3+0x52>
     628:	b8 01       	movw	r22, r16
     62a:	7c c0       	rjmp	.+248    	; 0x724 <__divsf3+0x14a>
     62c:	8a 85       	ldd	r24, Y+10	; 0x0a
     62e:	9a 89       	ldd	r25, Y+18	; 0x12
     630:	89 27       	eor	r24, r25
     632:	8a 87       	std	Y+10, r24	; 0x0a
     634:	24 30       	cpi	r18, 0x04	; 4
     636:	11 f0       	breq	.+4      	; 0x63c <__divsf3+0x62>
     638:	22 30       	cpi	r18, 0x02	; 2
     63a:	31 f4       	brne	.+12     	; 0x648 <__divsf3+0x6e>
     63c:	23 17       	cp	r18, r19
     63e:	09 f0       	breq	.+2      	; 0x642 <__divsf3+0x68>
     640:	6e c0       	rjmp	.+220    	; 0x71e <__divsf3+0x144>
     642:	68 e7       	ldi	r22, 0x78	; 120
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	6e c0       	rjmp	.+220    	; 0x724 <__divsf3+0x14a>
     648:	34 30       	cpi	r19, 0x04	; 4
     64a:	39 f4       	brne	.+14     	; 0x65a <__divsf3+0x80>
     64c:	1d 86       	std	Y+13, r1	; 0x0d
     64e:	1e 86       	std	Y+14, r1	; 0x0e
     650:	1f 86       	std	Y+15, r1	; 0x0f
     652:	18 8a       	std	Y+16, r1	; 0x10
     654:	1c 86       	std	Y+12, r1	; 0x0c
     656:	1b 86       	std	Y+11, r1	; 0x0b
     658:	04 c0       	rjmp	.+8      	; 0x662 <__divsf3+0x88>
     65a:	32 30       	cpi	r19, 0x02	; 2
     65c:	21 f4       	brne	.+8      	; 0x666 <__divsf3+0x8c>
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	89 87       	std	Y+9, r24	; 0x09
     662:	b7 01       	movw	r22, r14
     664:	5f c0       	rjmp	.+190    	; 0x724 <__divsf3+0x14a>
     666:	2b 85       	ldd	r18, Y+11	; 0x0b
     668:	3c 85       	ldd	r19, Y+12	; 0x0c
     66a:	8b 89       	ldd	r24, Y+19	; 0x13
     66c:	9c 89       	ldd	r25, Y+20	; 0x14
     66e:	28 1b       	sub	r18, r24
     670:	39 0b       	sbc	r19, r25
     672:	3c 87       	std	Y+12, r19	; 0x0c
     674:	2b 87       	std	Y+11, r18	; 0x0b
     676:	ed 84       	ldd	r14, Y+13	; 0x0d
     678:	fe 84       	ldd	r15, Y+14	; 0x0e
     67a:	0f 85       	ldd	r16, Y+15	; 0x0f
     67c:	18 89       	ldd	r17, Y+16	; 0x10
     67e:	ad 88       	ldd	r10, Y+21	; 0x15
     680:	be 88       	ldd	r11, Y+22	; 0x16
     682:	cf 88       	ldd	r12, Y+23	; 0x17
     684:	d8 8c       	ldd	r13, Y+24	; 0x18
     686:	ea 14       	cp	r14, r10
     688:	fb 04       	cpc	r15, r11
     68a:	0c 05       	cpc	r16, r12
     68c:	1d 05       	cpc	r17, r13
     68e:	40 f4       	brcc	.+16     	; 0x6a0 <__divsf3+0xc6>
     690:	ee 0c       	add	r14, r14
     692:	ff 1c       	adc	r15, r15
     694:	00 1f       	adc	r16, r16
     696:	11 1f       	adc	r17, r17
     698:	21 50       	subi	r18, 0x01	; 1
     69a:	30 40       	sbci	r19, 0x00	; 0
     69c:	3c 87       	std	Y+12, r19	; 0x0c
     69e:	2b 87       	std	Y+11, r18	; 0x0b
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	a0 e0       	ldi	r26, 0x00	; 0
     6ae:	b0 e4       	ldi	r27, 0x40	; 64
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	ea 14       	cp	r14, r10
     6b6:	fb 04       	cpc	r15, r11
     6b8:	0c 05       	cpc	r16, r12
     6ba:	1d 05       	cpc	r17, r13
     6bc:	40 f0       	brcs	.+16     	; 0x6ce <__divsf3+0xf4>
     6be:	28 2b       	or	r18, r24
     6c0:	39 2b       	or	r19, r25
     6c2:	4a 2b       	or	r20, r26
     6c4:	5b 2b       	or	r21, r27
     6c6:	ea 18       	sub	r14, r10
     6c8:	fb 08       	sbc	r15, r11
     6ca:	0c 09       	sbc	r16, r12
     6cc:	1d 09       	sbc	r17, r13
     6ce:	b6 95       	lsr	r27
     6d0:	a7 95       	ror	r26
     6d2:	97 95       	ror	r25
     6d4:	87 95       	ror	r24
     6d6:	ee 0c       	add	r14, r14
     6d8:	ff 1c       	adc	r15, r15
     6da:	00 1f       	adc	r16, r16
     6dc:	11 1f       	adc	r17, r17
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	7f 4f       	sbci	r23, 0xFF	; 255
     6e2:	6f 31       	cpi	r22, 0x1F	; 31
     6e4:	71 05       	cpc	r23, r1
     6e6:	31 f7       	brne	.-52     	; 0x6b4 <__divsf3+0xda>
     6e8:	da 01       	movw	r26, r20
     6ea:	c9 01       	movw	r24, r18
     6ec:	8f 77       	andi	r24, 0x7F	; 127
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	a0 70       	andi	r26, 0x00	; 0
     6f2:	b0 70       	andi	r27, 0x00	; 0
     6f4:	80 34       	cpi	r24, 0x40	; 64
     6f6:	91 05       	cpc	r25, r1
     6f8:	a1 05       	cpc	r26, r1
     6fa:	b1 05       	cpc	r27, r1
     6fc:	61 f4       	brne	.+24     	; 0x716 <__divsf3+0x13c>
     6fe:	27 fd       	sbrc	r18, 7
     700:	0a c0       	rjmp	.+20     	; 0x716 <__divsf3+0x13c>
     702:	e1 14       	cp	r14, r1
     704:	f1 04       	cpc	r15, r1
     706:	01 05       	cpc	r16, r1
     708:	11 05       	cpc	r17, r1
     70a:	29 f0       	breq	.+10     	; 0x716 <__divsf3+0x13c>
     70c:	20 5c       	subi	r18, 0xC0	; 192
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	4f 4f       	sbci	r20, 0xFF	; 255
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	20 78       	andi	r18, 0x80	; 128
     716:	2d 87       	std	Y+13, r18	; 0x0d
     718:	3e 87       	std	Y+14, r19	; 0x0e
     71a:	4f 87       	std	Y+15, r20	; 0x0f
     71c:	58 8b       	std	Y+16, r21	; 0x10
     71e:	be 01       	movw	r22, r28
     720:	67 5f       	subi	r22, 0xF7	; 247
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	cb 01       	movw	r24, r22
     726:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__pack_f>
     72a:	68 96       	adiw	r28, 0x18	; 24
     72c:	ea e0       	ldi	r30, 0x0A	; 10
     72e:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__+0x10>

00000732 <__nesf2>:
     732:	a8 e1       	ldi	r26, 0x18	; 24
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	ef e9       	ldi	r30, 0x9F	; 159
     738:	f3 e0       	ldi	r31, 0x03	; 3
     73a:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__+0x18>
     73e:	69 83       	std	Y+1, r22	; 0x01
     740:	7a 83       	std	Y+2, r23	; 0x02
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	9c 83       	std	Y+4, r25	; 0x04
     746:	2d 83       	std	Y+5, r18	; 0x05
     748:	3e 83       	std	Y+6, r19	; 0x06
     74a:	4f 83       	std	Y+7, r20	; 0x07
     74c:	58 87       	std	Y+8, r21	; 0x08
     74e:	89 e0       	ldi	r24, 0x09	; 9
     750:	e8 2e       	mov	r14, r24
     752:	f1 2c       	mov	r15, r1
     754:	ec 0e       	add	r14, r28
     756:	fd 1e       	adc	r15, r29
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	b7 01       	movw	r22, r14
     75e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     762:	8e 01       	movw	r16, r28
     764:	0f 5e       	subi	r16, 0xEF	; 239
     766:	1f 4f       	sbci	r17, 0xFF	; 255
     768:	ce 01       	movw	r24, r28
     76a:	05 96       	adiw	r24, 0x05	; 5
     76c:	b8 01       	movw	r22, r16
     76e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     772:	89 85       	ldd	r24, Y+9	; 0x09
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	40 f0       	brcs	.+16     	; 0x788 <__nesf2+0x56>
     778:	89 89       	ldd	r24, Y+17	; 0x11
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	28 f0       	brcs	.+10     	; 0x788 <__nesf2+0x56>
     77e:	c7 01       	movw	r24, r14
     780:	b8 01       	movw	r22, r16
     782:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fpcmp_parts_f>
     786:	01 c0       	rjmp	.+2      	; 0x78a <__nesf2+0x58>
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	68 96       	adiw	r28, 0x18	; 24
     78c:	e6 e0       	ldi	r30, 0x06	; 6
     78e:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__+0x18>

00000792 <__ltsf2>:
     792:	a8 e1       	ldi	r26, 0x18	; 24
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	ef ec       	ldi	r30, 0xCF	; 207
     798:	f3 e0       	ldi	r31, 0x03	; 3
     79a:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__+0x18>
     79e:	69 83       	std	Y+1, r22	; 0x01
     7a0:	7a 83       	std	Y+2, r23	; 0x02
     7a2:	8b 83       	std	Y+3, r24	; 0x03
     7a4:	9c 83       	std	Y+4, r25	; 0x04
     7a6:	2d 83       	std	Y+5, r18	; 0x05
     7a8:	3e 83       	std	Y+6, r19	; 0x06
     7aa:	4f 83       	std	Y+7, r20	; 0x07
     7ac:	58 87       	std	Y+8, r21	; 0x08
     7ae:	89 e0       	ldi	r24, 0x09	; 9
     7b0:	e8 2e       	mov	r14, r24
     7b2:	f1 2c       	mov	r15, r1
     7b4:	ec 0e       	add	r14, r28
     7b6:	fd 1e       	adc	r15, r29
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	b7 01       	movw	r22, r14
     7be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5e       	subi	r16, 0xEF	; 239
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	ce 01       	movw	r24, r28
     7ca:	05 96       	adiw	r24, 0x05	; 5
     7cc:	b8 01       	movw	r22, r16
     7ce:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     7d2:	89 85       	ldd	r24, Y+9	; 0x09
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	40 f0       	brcs	.+16     	; 0x7e8 <__ltsf2+0x56>
     7d8:	89 89       	ldd	r24, Y+17	; 0x11
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	28 f0       	brcs	.+10     	; 0x7e8 <__ltsf2+0x56>
     7de:	c7 01       	movw	r24, r14
     7e0:	b8 01       	movw	r22, r16
     7e2:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fpcmp_parts_f>
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <__ltsf2+0x58>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	68 96       	adiw	r28, 0x18	; 24
     7ec:	e6 e0       	ldi	r30, 0x06	; 6
     7ee:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__+0x18>

000007f2 <__floatsisf>:
     7f2:	a8 e0       	ldi	r26, 0x08	; 8
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	ef ef       	ldi	r30, 0xFF	; 255
     7f8:	f3 e0       	ldi	r31, 0x03	; 3
     7fa:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__prologue_saves__+0x12>
     7fe:	9b 01       	movw	r18, r22
     800:	ac 01       	movw	r20, r24
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	da 01       	movw	r26, r20
     808:	c9 01       	movw	r24, r18
     80a:	88 27       	eor	r24, r24
     80c:	b7 fd       	sbrc	r27, 7
     80e:	83 95       	inc	r24
     810:	99 27       	eor	r25, r25
     812:	aa 27       	eor	r26, r26
     814:	bb 27       	eor	r27, r27
     816:	b8 2e       	mov	r11, r24
     818:	21 15       	cp	r18, r1
     81a:	31 05       	cpc	r19, r1
     81c:	41 05       	cpc	r20, r1
     81e:	51 05       	cpc	r21, r1
     820:	19 f4       	brne	.+6      	; 0x828 <__floatsisf+0x36>
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	89 83       	std	Y+1, r24	; 0x01
     826:	3a c0       	rjmp	.+116    	; 0x89c <__stack+0x3d>
     828:	88 23       	and	r24, r24
     82a:	a9 f0       	breq	.+42     	; 0x856 <__floatsisf+0x64>
     82c:	20 30       	cpi	r18, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	38 07       	cpc	r19, r24
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	48 07       	cpc	r20, r24
     836:	80 e8       	ldi	r24, 0x80	; 128
     838:	58 07       	cpc	r21, r24
     83a:	29 f4       	brne	.+10     	; 0x846 <__floatsisf+0x54>
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	9f ec       	ldi	r25, 0xCF	; 207
     844:	30 c0       	rjmp	.+96     	; 0x8a6 <__stack+0x47>
     846:	ee 24       	eor	r14, r14
     848:	ff 24       	eor	r15, r15
     84a:	87 01       	movw	r16, r14
     84c:	e2 1a       	sub	r14, r18
     84e:	f3 0a       	sbc	r15, r19
     850:	04 0b       	sbc	r16, r20
     852:	15 0b       	sbc	r17, r21
     854:	02 c0       	rjmp	.+4      	; 0x85a <__floatsisf+0x68>
     856:	79 01       	movw	r14, r18
     858:	8a 01       	movw	r16, r20
     85a:	8e e1       	ldi	r24, 0x1E	; 30
     85c:	c8 2e       	mov	r12, r24
     85e:	d1 2c       	mov	r13, r1
     860:	dc 82       	std	Y+4, r13	; 0x04
     862:	cb 82       	std	Y+3, r12	; 0x03
     864:	ed 82       	std	Y+5, r14	; 0x05
     866:	fe 82       	std	Y+6, r15	; 0x06
     868:	0f 83       	std	Y+7, r16	; 0x07
     86a:	18 87       	std	Y+8, r17	; 0x08
     86c:	c8 01       	movw	r24, r16
     86e:	b7 01       	movw	r22, r14
     870:	0e 94 ab 04 	call	0x956	; 0x956 <__clzsi2>
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	18 16       	cp	r1, r24
     878:	19 06       	cpc	r1, r25
     87a:	84 f4       	brge	.+32     	; 0x89c <__stack+0x3d>
     87c:	08 2e       	mov	r0, r24
     87e:	04 c0       	rjmp	.+8      	; 0x888 <__stack+0x29>
     880:	ee 0c       	add	r14, r14
     882:	ff 1c       	adc	r15, r15
     884:	00 1f       	adc	r16, r16
     886:	11 1f       	adc	r17, r17
     888:	0a 94       	dec	r0
     88a:	d2 f7       	brpl	.-12     	; 0x880 <__stack+0x21>
     88c:	ed 82       	std	Y+5, r14	; 0x05
     88e:	fe 82       	std	Y+6, r15	; 0x06
     890:	0f 83       	std	Y+7, r16	; 0x07
     892:	18 87       	std	Y+8, r17	; 0x08
     894:	c8 1a       	sub	r12, r24
     896:	d9 0a       	sbc	r13, r25
     898:	dc 82       	std	Y+4, r13	; 0x04
     89a:	cb 82       	std	Y+3, r12	; 0x03
     89c:	ba 82       	std	Y+2, r11	; 0x02
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__pack_f>
     8a6:	28 96       	adiw	r28, 0x08	; 8
     8a8:	e9 e0       	ldi	r30, 0x09	; 9
     8aa:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__epilogue_restores__+0x12>

000008ae <__fixsfsi>:
     8ae:	ac e0       	ldi	r26, 0x0C	; 12
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	ed e5       	ldi	r30, 0x5D	; 93
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__prologue_saves__+0x20>
     8ba:	69 83       	std	Y+1, r22	; 0x01
     8bc:	7a 83       	std	Y+2, r23	; 0x02
     8be:	8b 83       	std	Y+3, r24	; 0x03
     8c0:	9c 83       	std	Y+4, r25	; 0x04
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	be 01       	movw	r22, r28
     8c8:	6b 5f       	subi	r22, 0xFB	; 251
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__unpack_f>
     8d0:	8d 81       	ldd	r24, Y+5	; 0x05
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	61 f1       	breq	.+88     	; 0x92e <__fixsfsi+0x80>
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	50 f1       	brcs	.+84     	; 0x92e <__fixsfsi+0x80>
     8da:	84 30       	cpi	r24, 0x04	; 4
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <__fixsfsi+0x38>
     8de:	8e 81       	ldd	r24, Y+6	; 0x06
     8e0:	88 23       	and	r24, r24
     8e2:	51 f1       	breq	.+84     	; 0x938 <__fixsfsi+0x8a>
     8e4:	2e c0       	rjmp	.+92     	; 0x942 <__fixsfsi+0x94>
     8e6:	2f 81       	ldd	r18, Y+7	; 0x07
     8e8:	38 85       	ldd	r19, Y+8	; 0x08
     8ea:	37 fd       	sbrc	r19, 7
     8ec:	20 c0       	rjmp	.+64     	; 0x92e <__fixsfsi+0x80>
     8ee:	6e 81       	ldd	r22, Y+6	; 0x06
     8f0:	2f 31       	cpi	r18, 0x1F	; 31
     8f2:	31 05       	cpc	r19, r1
     8f4:	1c f0       	brlt	.+6      	; 0x8fc <__fixsfsi+0x4e>
     8f6:	66 23       	and	r22, r22
     8f8:	f9 f0       	breq	.+62     	; 0x938 <__fixsfsi+0x8a>
     8fa:	23 c0       	rjmp	.+70     	; 0x942 <__fixsfsi+0x94>
     8fc:	8e e1       	ldi	r24, 0x1E	; 30
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	29 85       	ldd	r18, Y+9	; 0x09
     906:	3a 85       	ldd	r19, Y+10	; 0x0a
     908:	4b 85       	ldd	r20, Y+11	; 0x0b
     90a:	5c 85       	ldd	r21, Y+12	; 0x0c
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__fixsfsi+0x68>
     90e:	56 95       	lsr	r21
     910:	47 95       	ror	r20
     912:	37 95       	ror	r19
     914:	27 95       	ror	r18
     916:	8a 95       	dec	r24
     918:	d2 f7       	brpl	.-12     	; 0x90e <__fixsfsi+0x60>
     91a:	66 23       	and	r22, r22
     91c:	b1 f0       	breq	.+44     	; 0x94a <__fixsfsi+0x9c>
     91e:	50 95       	com	r21
     920:	40 95       	com	r20
     922:	30 95       	com	r19
     924:	21 95       	neg	r18
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	4f 4f       	sbci	r20, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	0e c0       	rjmp	.+28     	; 0x94a <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	09 c0       	rjmp	.+18     	; 0x94a <__fixsfsi+0x9c>
     938:	2f ef       	ldi	r18, 0xFF	; 255
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	4f ef       	ldi	r20, 0xFF	; 255
     93e:	5f e7       	ldi	r21, 0x7F	; 127
     940:	04 c0       	rjmp	.+8      	; 0x94a <__fixsfsi+0x9c>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e8       	ldi	r21, 0x80	; 128
     94a:	b9 01       	movw	r22, r18
     94c:	ca 01       	movw	r24, r20
     94e:	2c 96       	adiw	r28, 0x0c	; 12
     950:	e2 e0       	ldi	r30, 0x02	; 2
     952:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__epilogue_restores__+0x20>

00000956 <__clzsi2>:
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	e8 16       	cp	r14, r24
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	f8 06       	cpc	r15, r24
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	08 07       	cpc	r16, r24
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	18 07       	cpc	r17, r24
     972:	88 f4       	brcc	.+34     	; 0x996 <__clzsi2+0x40>
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	e8 16       	cp	r14, r24
     978:	f1 04       	cpc	r15, r1
     97a:	01 05       	cpc	r16, r1
     97c:	11 05       	cpc	r17, r1
     97e:	31 f0       	breq	.+12     	; 0x98c <__clzsi2+0x36>
     980:	28 f0       	brcs	.+10     	; 0x98c <__clzsi2+0x36>
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	17 c0       	rjmp	.+46     	; 0x9ba <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	12 c0       	rjmp	.+36     	; 0x9ba <__clzsi2+0x64>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	e8 16       	cp	r14, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	f8 06       	cpc	r15, r24
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	08 07       	cpc	r16, r24
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	18 07       	cpc	r17, r24
     9a6:	28 f0       	brcs	.+10     	; 0x9b2 <__clzsi2+0x5c>
     9a8:	88 e1       	ldi	r24, 0x18	; 24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__clzsi2+0x64>
     9b2:	80 e1       	ldi	r24, 0x10	; 16
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	20 e2       	ldi	r18, 0x20	; 32
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	28 1b       	sub	r18, r24
     9c4:	39 0b       	sbc	r19, r25
     9c6:	4a 0b       	sbc	r20, r26
     9c8:	5b 0b       	sbc	r21, r27
     9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <__clzsi2+0x7e>
     9cc:	16 95       	lsr	r17
     9ce:	07 95       	ror	r16
     9d0:	f7 94       	ror	r15
     9d2:	e7 94       	ror	r14
     9d4:	8a 95       	dec	r24
     9d6:	d2 f7       	brpl	.-12     	; 0x9cc <__clzsi2+0x76>
     9d8:	f7 01       	movw	r30, r14
     9da:	e0 58       	subi	r30, 0x80	; 128
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	80 81       	ld	r24, Z
     9e0:	28 1b       	sub	r18, r24
     9e2:	31 09       	sbc	r19, r1
     9e4:	41 09       	sbc	r20, r1
     9e6:	51 09       	sbc	r21, r1
     9e8:	c9 01       	movw	r24, r18
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <__pack_f>:
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	fc 01       	movw	r30, r24
     a00:	e4 80       	ldd	r14, Z+4	; 0x04
     a02:	f5 80       	ldd	r15, Z+5	; 0x05
     a04:	06 81       	ldd	r16, Z+6	; 0x06
     a06:	17 81       	ldd	r17, Z+7	; 0x07
     a08:	d1 80       	ldd	r13, Z+1	; 0x01
     a0a:	80 81       	ld	r24, Z
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	48 f4       	brcc	.+18     	; 0xa22 <__pack_f+0x2e>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e1       	ldi	r26, 0x10	; 16
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	e8 2a       	or	r14, r24
     a1a:	f9 2a       	or	r15, r25
     a1c:	0a 2b       	or	r16, r26
     a1e:	1b 2b       	or	r17, r27
     a20:	a5 c0       	rjmp	.+330    	; 0xb6c <__pack_f+0x178>
     a22:	84 30       	cpi	r24, 0x04	; 4
     a24:	09 f4       	brne	.+2      	; 0xa28 <__pack_f+0x34>
     a26:	9f c0       	rjmp	.+318    	; 0xb66 <__pack_f+0x172>
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	21 f4       	brne	.+8      	; 0xa34 <__pack_f+0x40>
     a2c:	ee 24       	eor	r14, r14
     a2e:	ff 24       	eor	r15, r15
     a30:	87 01       	movw	r16, r14
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <__pack_f+0x4a>
     a34:	e1 14       	cp	r14, r1
     a36:	f1 04       	cpc	r15, r1
     a38:	01 05       	cpc	r16, r1
     a3a:	11 05       	cpc	r17, r1
     a3c:	19 f4       	brne	.+6      	; 0xa44 <__pack_f+0x50>
     a3e:	e0 e0       	ldi	r30, 0x00	; 0
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	96 c0       	rjmp	.+300    	; 0xb70 <__pack_f+0x17c>
     a44:	62 81       	ldd	r22, Z+2	; 0x02
     a46:	73 81       	ldd	r23, Z+3	; 0x03
     a48:	9f ef       	ldi	r25, 0xFF	; 255
     a4a:	62 38       	cpi	r22, 0x82	; 130
     a4c:	79 07       	cpc	r23, r25
     a4e:	0c f0       	brlt	.+2      	; 0xa52 <__pack_f+0x5e>
     a50:	5b c0       	rjmp	.+182    	; 0xb08 <__pack_f+0x114>
     a52:	22 e8       	ldi	r18, 0x82	; 130
     a54:	3f ef       	ldi	r19, 0xFF	; 255
     a56:	26 1b       	sub	r18, r22
     a58:	37 0b       	sbc	r19, r23
     a5a:	2a 31       	cpi	r18, 0x1A	; 26
     a5c:	31 05       	cpc	r19, r1
     a5e:	2c f0       	brlt	.+10     	; 0xa6a <__pack_f+0x76>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	2a c0       	rjmp	.+84     	; 0xabe <__pack_f+0xca>
     a6a:	b8 01       	movw	r22, r16
     a6c:	a7 01       	movw	r20, r14
     a6e:	02 2e       	mov	r0, r18
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__pack_f+0x86>
     a72:	76 95       	lsr	r23
     a74:	67 95       	ror	r22
     a76:	57 95       	ror	r21
     a78:	47 95       	ror	r20
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__pack_f+0x7e>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x9c>
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	aa 1f       	adc	r26, r26
     a8e:	bb 1f       	adc	r27, r27
     a90:	2a 95       	dec	r18
     a92:	d2 f7       	brpl	.-12     	; 0xa88 <__pack_f+0x94>
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	a1 09       	sbc	r26, r1
     a98:	b1 09       	sbc	r27, r1
     a9a:	8e 21       	and	r24, r14
     a9c:	9f 21       	and	r25, r15
     a9e:	a0 23       	and	r26, r16
     aa0:	b1 23       	and	r27, r17
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	a1 05       	cpc	r26, r1
     aa6:	b1 05       	cpc	r27, r1
     aa8:	21 f0       	breq	.+8      	; 0xab2 <__pack_f+0xbe>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	9a 01       	movw	r18, r20
     ab4:	ab 01       	movw	r20, r22
     ab6:	28 2b       	or	r18, r24
     ab8:	39 2b       	or	r19, r25
     aba:	4a 2b       	or	r20, r26
     abc:	5b 2b       	or	r21, r27
     abe:	da 01       	movw	r26, r20
     ac0:	c9 01       	movw	r24, r18
     ac2:	8f 77       	andi	r24, 0x7F	; 127
     ac4:	90 70       	andi	r25, 0x00	; 0
     ac6:	a0 70       	andi	r26, 0x00	; 0
     ac8:	b0 70       	andi	r27, 0x00	; 0
     aca:	80 34       	cpi	r24, 0x40	; 64
     acc:	91 05       	cpc	r25, r1
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	39 f4       	brne	.+14     	; 0xae2 <__pack_f+0xee>
     ad4:	27 ff       	sbrs	r18, 7
     ad6:	09 c0       	rjmp	.+18     	; 0xaea <__pack_f+0xf6>
     ad8:	20 5c       	subi	r18, 0xC0	; 192
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__pack_f+0xf6>
     ae2:	21 5c       	subi	r18, 0xC1	; 193
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	4f 4f       	sbci	r20, 0xFF	; 255
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	e0 e0       	ldi	r30, 0x00	; 0
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	20 30       	cpi	r18, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	3a 07       	cpc	r19, r26
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	4a 07       	cpc	r20, r26
     af8:	a0 e4       	ldi	r26, 0x40	; 64
     afa:	5a 07       	cpc	r21, r26
     afc:	10 f0       	brcs	.+4      	; 0xb02 <__pack_f+0x10e>
     afe:	e1 e0       	ldi	r30, 0x01	; 1
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	79 01       	movw	r14, r18
     b04:	8a 01       	movw	r16, r20
     b06:	27 c0       	rjmp	.+78     	; 0xb56 <__pack_f+0x162>
     b08:	60 38       	cpi	r22, 0x80	; 128
     b0a:	71 05       	cpc	r23, r1
     b0c:	64 f5       	brge	.+88     	; 0xb66 <__pack_f+0x172>
     b0e:	fb 01       	movw	r30, r22
     b10:	e1 58       	subi	r30, 0x81	; 129
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	d8 01       	movw	r26, r16
     b16:	c7 01       	movw	r24, r14
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	90 70       	andi	r25, 0x00	; 0
     b1c:	a0 70       	andi	r26, 0x00	; 0
     b1e:	b0 70       	andi	r27, 0x00	; 0
     b20:	80 34       	cpi	r24, 0x40	; 64
     b22:	91 05       	cpc	r25, r1
     b24:	a1 05       	cpc	r26, r1
     b26:	b1 05       	cpc	r27, r1
     b28:	39 f4       	brne	.+14     	; 0xb38 <__pack_f+0x144>
     b2a:	e7 fe       	sbrs	r14, 7
     b2c:	0d c0       	rjmp	.+26     	; 0xb48 <__pack_f+0x154>
     b2e:	80 e4       	ldi	r24, 0x40	; 64
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__pack_f+0x14c>
     b38:	8f e3       	ldi	r24, 0x3F	; 63
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e8 0e       	add	r14, r24
     b42:	f9 1e       	adc	r15, r25
     b44:	0a 1f       	adc	r16, r26
     b46:	1b 1f       	adc	r17, r27
     b48:	17 ff       	sbrs	r17, 7
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x162>
     b4c:	16 95       	lsr	r17
     b4e:	07 95       	ror	r16
     b50:	f7 94       	ror	r15
     b52:	e7 94       	ror	r14
     b54:	31 96       	adiw	r30, 0x01	; 1
     b56:	87 e0       	ldi	r24, 0x07	; 7
     b58:	16 95       	lsr	r17
     b5a:	07 95       	ror	r16
     b5c:	f7 94       	ror	r15
     b5e:	e7 94       	ror	r14
     b60:	8a 95       	dec	r24
     b62:	d1 f7       	brne	.-12     	; 0xb58 <__pack_f+0x164>
     b64:	05 c0       	rjmp	.+10     	; 0xb70 <__pack_f+0x17c>
     b66:	ee 24       	eor	r14, r14
     b68:	ff 24       	eor	r15, r15
     b6a:	87 01       	movw	r16, r14
     b6c:	ef ef       	ldi	r30, 0xFF	; 255
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	6e 2f       	mov	r22, r30
     b72:	67 95       	ror	r22
     b74:	66 27       	eor	r22, r22
     b76:	67 95       	ror	r22
     b78:	90 2f       	mov	r25, r16
     b7a:	9f 77       	andi	r25, 0x7F	; 127
     b7c:	d7 94       	ror	r13
     b7e:	dd 24       	eor	r13, r13
     b80:	d7 94       	ror	r13
     b82:	8e 2f       	mov	r24, r30
     b84:	86 95       	lsr	r24
     b86:	49 2f       	mov	r20, r25
     b88:	46 2b       	or	r20, r22
     b8a:	58 2f       	mov	r21, r24
     b8c:	5d 29       	or	r21, r13
     b8e:	b7 01       	movw	r22, r14
     b90:	ca 01       	movw	r24, r20
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	08 95       	ret

00000b9e <__unpack_f>:
     b9e:	fc 01       	movw	r30, r24
     ba0:	db 01       	movw	r26, r22
     ba2:	40 81       	ld	r20, Z
     ba4:	51 81       	ldd	r21, Z+1	; 0x01
     ba6:	22 81       	ldd	r18, Z+2	; 0x02
     ba8:	62 2f       	mov	r22, r18
     baa:	6f 77       	andi	r22, 0x7F	; 127
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	22 1f       	adc	r18, r18
     bb0:	22 27       	eor	r18, r18
     bb2:	22 1f       	adc	r18, r18
     bb4:	93 81       	ldd	r25, Z+3	; 0x03
     bb6:	89 2f       	mov	r24, r25
     bb8:	88 0f       	add	r24, r24
     bba:	82 2b       	or	r24, r18
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	99 1f       	adc	r25, r25
     bc2:	99 27       	eor	r25, r25
     bc4:	99 1f       	adc	r25, r25
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	9c 93       	st	X, r25
     bca:	11 97       	sbiw	r26, 0x01	; 1
     bcc:	21 15       	cp	r18, r1
     bce:	31 05       	cpc	r19, r1
     bd0:	a9 f5       	brne	.+106    	; 0xc3c <__unpack_f+0x9e>
     bd2:	41 15       	cp	r20, r1
     bd4:	51 05       	cpc	r21, r1
     bd6:	61 05       	cpc	r22, r1
     bd8:	71 05       	cpc	r23, r1
     bda:	11 f4       	brne	.+4      	; 0xbe0 <__unpack_f+0x42>
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	37 c0       	rjmp	.+110    	; 0xc4e <__unpack_f+0xb0>
     be0:	82 e8       	ldi	r24, 0x82	; 130
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	13 96       	adiw	r26, 0x03	; 3
     be6:	9c 93       	st	X, r25
     be8:	8e 93       	st	-X, r24
     bea:	12 97       	sbiw	r26, 0x02	; 2
     bec:	9a 01       	movw	r18, r20
     bee:	ab 01       	movw	r20, r22
     bf0:	67 e0       	ldi	r22, 0x07	; 7
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	44 1f       	adc	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	6a 95       	dec	r22
     bfc:	d1 f7       	brne	.-12     	; 0xbf2 <__unpack_f+0x54>
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	8c 93       	st	X, r24
     c02:	0d c0       	rjmp	.+26     	; 0xc1e <__unpack_f+0x80>
     c04:	22 0f       	add	r18, r18
     c06:	33 1f       	adc	r19, r19
     c08:	44 1f       	adc	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	12 96       	adiw	r26, 0x02	; 2
     c0e:	8d 91       	ld	r24, X+
     c10:	9c 91       	ld	r25, X
     c12:	13 97       	sbiw	r26, 0x03	; 3
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	13 96       	adiw	r26, 0x03	; 3
     c18:	9c 93       	st	X, r25
     c1a:	8e 93       	st	-X, r24
     c1c:	12 97       	sbiw	r26, 0x02	; 2
     c1e:	20 30       	cpi	r18, 0x00	; 0
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	38 07       	cpc	r19, r24
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	48 07       	cpc	r20, r24
     c28:	80 e4       	ldi	r24, 0x40	; 64
     c2a:	58 07       	cpc	r21, r24
     c2c:	58 f3       	brcs	.-42     	; 0xc04 <__unpack_f+0x66>
     c2e:	14 96       	adiw	r26, 0x04	; 4
     c30:	2d 93       	st	X+, r18
     c32:	3d 93       	st	X+, r19
     c34:	4d 93       	st	X+, r20
     c36:	5c 93       	st	X, r21
     c38:	17 97       	sbiw	r26, 0x07	; 7
     c3a:	08 95       	ret
     c3c:	2f 3f       	cpi	r18, 0xFF	; 255
     c3e:	31 05       	cpc	r19, r1
     c40:	79 f4       	brne	.+30     	; 0xc60 <__unpack_f+0xc2>
     c42:	41 15       	cp	r20, r1
     c44:	51 05       	cpc	r21, r1
     c46:	61 05       	cpc	r22, r1
     c48:	71 05       	cpc	r23, r1
     c4a:	19 f4       	brne	.+6      	; 0xc52 <__unpack_f+0xb4>
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	8c 93       	st	X, r24
     c50:	08 95       	ret
     c52:	64 ff       	sbrs	r22, 4
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <__unpack_f+0xbe>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	8c 93       	st	X, r24
     c5a:	12 c0       	rjmp	.+36     	; 0xc80 <__unpack_f+0xe2>
     c5c:	1c 92       	st	X, r1
     c5e:	10 c0       	rjmp	.+32     	; 0xc80 <__unpack_f+0xe2>
     c60:	2f 57       	subi	r18, 0x7F	; 127
     c62:	30 40       	sbci	r19, 0x00	; 0
     c64:	13 96       	adiw	r26, 0x03	; 3
     c66:	3c 93       	st	X, r19
     c68:	2e 93       	st	-X, r18
     c6a:	12 97       	sbiw	r26, 0x02	; 2
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	8c 93       	st	X, r24
     c70:	87 e0       	ldi	r24, 0x07	; 7
     c72:	44 0f       	add	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	66 1f       	adc	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	8a 95       	dec	r24
     c7c:	d1 f7       	brne	.-12     	; 0xc72 <__unpack_f+0xd4>
     c7e:	70 64       	ori	r23, 0x40	; 64
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	4d 93       	st	X+, r20
     c84:	5d 93       	st	X+, r21
     c86:	6d 93       	st	X+, r22
     c88:	7c 93       	st	X, r23
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret

00000c8e <__fpcmp_parts_f>:
     c8e:	1f 93       	push	r17
     c90:	dc 01       	movw	r26, r24
     c92:	fb 01       	movw	r30, r22
     c94:	9c 91       	ld	r25, X
     c96:	92 30       	cpi	r25, 0x02	; 2
     c98:	08 f4       	brcc	.+2      	; 0xc9c <__fpcmp_parts_f+0xe>
     c9a:	47 c0       	rjmp	.+142    	; 0xd2a <__fpcmp_parts_f+0x9c>
     c9c:	80 81       	ld	r24, Z
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <__fpcmp_parts_f+0x16>
     ca2:	43 c0       	rjmp	.+134    	; 0xd2a <__fpcmp_parts_f+0x9c>
     ca4:	94 30       	cpi	r25, 0x04	; 4
     ca6:	51 f4       	brne	.+20     	; 0xcbc <__fpcmp_parts_f+0x2e>
     ca8:	11 96       	adiw	r26, 0x01	; 1
     caa:	1c 91       	ld	r17, X
     cac:	84 30       	cpi	r24, 0x04	; 4
     cae:	99 f5       	brne	.+102    	; 0xd16 <__fpcmp_parts_f+0x88>
     cb0:	81 81       	ldd	r24, Z+1	; 0x01
     cb2:	68 2f       	mov	r22, r24
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	61 1b       	sub	r22, r17
     cb8:	71 09       	sbc	r23, r1
     cba:	3f c0       	rjmp	.+126    	; 0xd3a <__fpcmp_parts_f+0xac>
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <__fpcmp_parts_f+0x3a>
     cc0:	92 30       	cpi	r25, 0x02	; 2
     cc2:	31 f4       	brne	.+12     	; 0xcd0 <__fpcmp_parts_f+0x42>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	b9 f1       	breq	.+110    	; 0xd36 <__fpcmp_parts_f+0xa8>
     cc8:	81 81       	ldd	r24, Z+1	; 0x01
     cca:	88 23       	and	r24, r24
     ccc:	89 f1       	breq	.+98     	; 0xd30 <__fpcmp_parts_f+0xa2>
     cce:	2d c0       	rjmp	.+90     	; 0xd2a <__fpcmp_parts_f+0x9c>
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	1c 91       	ld	r17, X
     cd4:	11 97       	sbiw	r26, 0x01	; 1
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	f1 f0       	breq	.+60     	; 0xd16 <__fpcmp_parts_f+0x88>
     cda:	81 81       	ldd	r24, Z+1	; 0x01
     cdc:	18 17       	cp	r17, r24
     cde:	d9 f4       	brne	.+54     	; 0xd16 <__fpcmp_parts_f+0x88>
     ce0:	12 96       	adiw	r26, 0x02	; 2
     ce2:	2d 91       	ld	r18, X+
     ce4:	3c 91       	ld	r19, X
     ce6:	13 97       	sbiw	r26, 0x03	; 3
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	82 17       	cp	r24, r18
     cee:	93 07       	cpc	r25, r19
     cf0:	94 f0       	brlt	.+36     	; 0xd16 <__fpcmp_parts_f+0x88>
     cf2:	28 17       	cp	r18, r24
     cf4:	39 07       	cpc	r19, r25
     cf6:	bc f0       	brlt	.+46     	; 0xd26 <__fpcmp_parts_f+0x98>
     cf8:	14 96       	adiw	r26, 0x04	; 4
     cfa:	8d 91       	ld	r24, X+
     cfc:	9d 91       	ld	r25, X+
     cfe:	0d 90       	ld	r0, X+
     d00:	bc 91       	ld	r27, X
     d02:	a0 2d       	mov	r26, r0
     d04:	24 81       	ldd	r18, Z+4	; 0x04
     d06:	35 81       	ldd	r19, Z+5	; 0x05
     d08:	46 81       	ldd	r20, Z+6	; 0x06
     d0a:	57 81       	ldd	r21, Z+7	; 0x07
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	4a 07       	cpc	r20, r26
     d12:	5b 07       	cpc	r21, r27
     d14:	18 f4       	brcc	.+6      	; 0xd1c <__fpcmp_parts_f+0x8e>
     d16:	11 23       	and	r17, r17
     d18:	41 f0       	breq	.+16     	; 0xd2a <__fpcmp_parts_f+0x9c>
     d1a:	0a c0       	rjmp	.+20     	; 0xd30 <__fpcmp_parts_f+0xa2>
     d1c:	82 17       	cp	r24, r18
     d1e:	93 07       	cpc	r25, r19
     d20:	a4 07       	cpc	r26, r20
     d22:	b5 07       	cpc	r27, r21
     d24:	40 f4       	brcc	.+16     	; 0xd36 <__fpcmp_parts_f+0xa8>
     d26:	11 23       	and	r17, r17
     d28:	19 f0       	breq	.+6      	; 0xd30 <__fpcmp_parts_f+0xa2>
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <__fpcmp_parts_f+0xac>
     d30:	6f ef       	ldi	r22, 0xFF	; 255
     d32:	7f ef       	ldi	r23, 0xFF	; 255
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <__fpcmp_parts_f+0xac>
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	cb 01       	movw	r24, r22
     d3c:	1f 91       	pop	r17
     d3e:	08 95       	ret

00000d40 <DIO_VidInit>:
#include "DIO_priv.h"
#include "DIO_conf.h"

void DIO_VidInit()
{
	DDRA_REG = CONC(	DIO_PORTA_PIN7_INIT_DIREC,
     d40:	80 ef       	ldi	r24, 0xF0	; 240
     d42:	8a bb       	out	0x1a, r24	; 26
						DIO_PORTA_PIN3_INIT_DIREC,
						DIO_PORTA_PIN2_INIT_DIREC,
						DIO_PORTA_PIN1_INIT_DIREC,
						DIO_PORTA_PIN0_INIT_DIREC	);

	DDRB_REG = CONC(	DIO_PORTB_PIN7_INIT_DIREC,
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	87 bb       	out	0x17, r24	; 23
						DIO_PORTB_PIN3_INIT_DIREC,
						DIO_PORTB_PIN2_INIT_DIREC,
						DIO_PORTB_PIN1_INIT_DIREC,
						DIO_PORTB_PIN0_INIT_DIREC	);

	DDRC_REG = CONC(	DIO_PORTC_PIN7_INIT_DIREC,
     d48:	84 bb       	out	0x14, r24	; 20
						DIO_PORTC_PIN3_INIT_DIREC,
						DIO_PORTC_PIN2_INIT_DIREC,
						DIO_PORTC_PIN1_INIT_DIREC,
						DIO_PORTC_PIN0_INIT_DIREC	);

	DDRD_REG = CONC(	DIO_PORTD_PIN7_INIT_DIREC,
     d4a:	81 bb       	out	0x11, r24	; 17
						DIO_PORTD_PIN3_INIT_DIREC,
						DIO_PORTD_PIN2_INIT_DIREC,
						DIO_PORTD_PIN1_INIT_DIREC,
						DIO_PORTD_PIN0_INIT_DIREC	);

	PORTA_REG = CONC(	DIO_PORTA_PIN7_INIT_VALUE,
     d4c:	8b bb       	out	0x1b, r24	; 27
						DIO_PORTA_PIN3_INIT_VALUE,
						DIO_PORTA_PIN2_INIT_VALUE,
						DIO_PORTA_PIN1_INIT_VALUE,
						DIO_PORTA_PIN0_INIT_VALUE	);

	PORTB_REG = CONC(	DIO_PORTB_PIN7_INIT_VALUE,
     d4e:	18 ba       	out	0x18, r1	; 24
						DIO_PORTB_PIN3_INIT_VALUE,
						DIO_PORTB_PIN2_INIT_VALUE,
						DIO_PORTB_PIN1_INIT_VALUE,
						DIO_PORTB_PIN0_INIT_VALUE	);

	PORTC_REG = CONC(	DIO_PORTC_PIN7_INIT_VALUE,
     d50:	15 ba       	out	0x15, r1	; 21
						DIO_PORTC_PIN3_INIT_VALUE,
						DIO_PORTC_PIN2_INIT_VALUE,
						DIO_PORTC_PIN1_INIT_VALUE,
						DIO_PORTC_PIN0_INIT_VALUE	);

	PORTD_REG = CONC(	DIO_PORTD_PIN7_INIT_VALUE,
     d52:	12 ba       	out	0x12, r1	; 18
						DIO_PORTD_PIN3_INIT_VALUE,
						DIO_PORTD_PIN2_INIT_VALUE,
						DIO_PORTD_PIN1_INIT_VALUE,
						DIO_PORTD_PIN0_INIT_VALUE	);

}
     d54:	08 95       	ret

00000d56 <DIO_VidSetPinDir>:

void DIO_VidSetPinDir(u8 u8PortId, u8 u8PinId, u8 u8PinDir)
{
	if(u8PortId <= DIO_PORTD && u8PinId <= DIO_PIN7)
     d56:	84 30       	cpi	r24, 0x04	; 4
     d58:	08 f0       	brcs	.+2      	; 0xd5c <DIO_VidSetPinDir+0x6>
     d5a:	83 c0       	rjmp	.+262    	; 0xe62 <DIO_VidSetPinDir+0x10c>
     d5c:	68 30       	cpi	r22, 0x08	; 8
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <DIO_VidSetPinDir+0xc>
     d60:	80 c0       	rjmp	.+256    	; 0xe62 <DIO_VidSetPinDir+0x10c>
	{
		if(GET_BIT(u8PinDir,0) == DIO_PIN_INPUT)
     d62:	40 fd       	sbrc	r20, 0
     d64:	42 c0       	rjmp	.+132    	; 0xdea <DIO_VidSetPinDir+0x94>
		{
			switch(u8PortId)
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	b1 f0       	breq	.+44     	; 0xd96 <DIO_VidSetPinDir+0x40>
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	30 f0       	brcs	.+12     	; 0xd7a <DIO_VidSetPinDir+0x24>
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	01 f1       	breq	.+64     	; 0xdb2 <DIO_VidSetPinDir+0x5c>
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	09 f0       	breq	.+2      	; 0xd78 <DIO_VidSetPinDir+0x22>
     d76:	75 c0       	rjmp	.+234    	; 0xe62 <DIO_VidSetPinDir+0x10c>
     d78:	2a c0       	rjmp	.+84     	; 0xdce <DIO_VidSetPinDir+0x78>
			{
			case DIO_PORTA : CLR_BIT(DDRA_REG,u8PinId); break;
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	20 81       	ld	r18, Z
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_VidSetPinDir+0x34>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	6a 95       	dec	r22
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_VidSetPinDir+0x30>
     d8e:	80 95       	com	r24
     d90:	82 23       	and	r24, r18
     d92:	80 83       	st	Z, r24
     d94:	08 95       	ret
			case DIO_PORTB : CLR_BIT(DDRB_REG,u8PinId); break;
     d96:	e7 e3       	ldi	r30, 0x37	; 55
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	20 81       	ld	r18, Z
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_VidSetPinDir+0x50>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	6a 95       	dec	r22
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_VidSetPinDir+0x4c>
     daa:	80 95       	com	r24
     dac:	82 23       	and	r24, r18
     dae:	80 83       	st	Z, r24
     db0:	08 95       	ret
			case DIO_PORTC : CLR_BIT(DDRC_REG,u8PinId); break;
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	20 81       	ld	r18, Z
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_VidSetPinDir+0x6c>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	6a 95       	dec	r22
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_VidSetPinDir+0x68>
     dc6:	80 95       	com	r24
     dc8:	82 23       	and	r24, r18
     dca:	80 83       	st	Z, r24
     dcc:	08 95       	ret
			case DIO_PORTD : CLR_BIT(DDRD_REG,u8PinId); break;
     dce:	e1 e3       	ldi	r30, 0x31	; 49
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	20 81       	ld	r18, Z
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_VidSetPinDir+0x88>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	6a 95       	dec	r22
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_VidSetPinDir+0x84>
     de2:	80 95       	com	r24
     de4:	82 23       	and	r24, r18
     de6:	80 83       	st	Z, r24
     de8:	08 95       	ret
			}
		}
		else if(GET_BIT(u8PinDir,0) == DIO_PIN_OUTPUT)
		{
			switch(u8PortId)
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	a1 f0       	breq	.+40     	; 0xe16 <DIO_VidSetPinDir+0xc0>
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	28 f0       	brcs	.+10     	; 0xdfc <DIO_VidSetPinDir+0xa6>
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	e9 f0       	breq	.+58     	; 0xe30 <DIO_VidSetPinDir+0xda>
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	a1 f5       	brne	.+104    	; 0xe62 <DIO_VidSetPinDir+0x10c>
     dfa:	27 c0       	rjmp	.+78     	; 0xe4a <DIO_VidSetPinDir+0xf4>
			{
			case DIO_PORTA : SET_BIT(DDRA_REG,u8PinId); break;
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	20 81       	ld	r18, Z
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_VidSetPinDir+0xb6>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	6a 95       	dec	r22
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_VidSetPinDir+0xb2>
     e10:	28 2b       	or	r18, r24
     e12:	20 83       	st	Z, r18
     e14:	08 95       	ret
			case DIO_PORTB : SET_BIT(DDRB_REG,u8PinId); break;
     e16:	e7 e3       	ldi	r30, 0x37	; 55
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	20 81       	ld	r18, Z
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_VidSetPinDir+0xd0>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	6a 95       	dec	r22
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_VidSetPinDir+0xcc>
     e2a:	28 2b       	or	r18, r24
     e2c:	20 83       	st	Z, r18
     e2e:	08 95       	ret
			case DIO_PORTC : SET_BIT(DDRC_REG,u8PinId); break;
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	20 81       	ld	r18, Z
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_VidSetPinDir+0xea>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	6a 95       	dec	r22
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_VidSetPinDir+0xe6>
     e44:	28 2b       	or	r18, r24
     e46:	20 83       	st	Z, r18
     e48:	08 95       	ret
			case DIO_PORTD : SET_BIT(DDRD_REG,u8PinId); break;
     e4a:	e1 e3       	ldi	r30, 0x31	; 49
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	20 81       	ld	r18, Z
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_VidSetPinDir+0x104>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	6a 95       	dec	r22
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_VidSetPinDir+0x100>
     e5e:	28 2b       	or	r18, r24
     e60:	20 83       	st	Z, r18
     e62:	08 95       	ret

00000e64 <DIO_VidSetPinVal>:
	}
}

void DIO_VidSetPinVal(u8 u8PortId, u8 u8PinId, u8 u8PinVal)
{
	if(u8PortId <= DIO_PORTD && u8PinId <= DIO_PIN7)
     e64:	84 30       	cpi	r24, 0x04	; 4
     e66:	08 f0       	brcs	.+2      	; 0xe6a <DIO_VidSetPinVal+0x6>
     e68:	83 c0       	rjmp	.+262    	; 0xf70 <DIO_VidSetPinVal+0x10c>
     e6a:	68 30       	cpi	r22, 0x08	; 8
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <DIO_VidSetPinVal+0xc>
     e6e:	80 c0       	rjmp	.+256    	; 0xf70 <DIO_VidSetPinVal+0x10c>
	{
		if(GET_BIT(u8PinVal,0) == DIO_PIN_LOW)
     e70:	40 fd       	sbrc	r20, 0
     e72:	42 c0       	rjmp	.+132    	; 0xef8 <DIO_VidSetPinVal+0x94>
		{
			switch(u8PortId)
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	b1 f0       	breq	.+44     	; 0xea4 <DIO_VidSetPinVal+0x40>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	30 f0       	brcs	.+12     	; 0xe88 <DIO_VidSetPinVal+0x24>
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	01 f1       	breq	.+64     	; 0xec0 <DIO_VidSetPinVal+0x5c>
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	09 f0       	breq	.+2      	; 0xe86 <DIO_VidSetPinVal+0x22>
     e84:	75 c0       	rjmp	.+234    	; 0xf70 <DIO_VidSetPinVal+0x10c>
     e86:	2a c0       	rjmp	.+84     	; 0xedc <DIO_VidSetPinVal+0x78>
			{
			case DIO_PORTA : CLR_BIT(PORTA_REG,u8PinId); break;
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	20 81       	ld	r18, Z
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_VidSetPinVal+0x34>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	6a 95       	dec	r22
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_VidSetPinVal+0x30>
     e9c:	80 95       	com	r24
     e9e:	82 23       	and	r24, r18
     ea0:	80 83       	st	Z, r24
     ea2:	08 95       	ret
			case DIO_PORTB : CLR_BIT(PORTB_REG,u8PinId); break;
     ea4:	e8 e3       	ldi	r30, 0x38	; 56
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	20 81       	ld	r18, Z
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_VidSetPinVal+0x50>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	6a 95       	dec	r22
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_VidSetPinVal+0x4c>
     eb8:	80 95       	com	r24
     eba:	82 23       	and	r24, r18
     ebc:	80 83       	st	Z, r24
     ebe:	08 95       	ret
			case DIO_PORTC : CLR_BIT(PORTC_REG,u8PinId); break;
     ec0:	e5 e3       	ldi	r30, 0x35	; 53
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	20 81       	ld	r18, Z
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_VidSetPinVal+0x6c>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	6a 95       	dec	r22
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_VidSetPinVal+0x68>
     ed4:	80 95       	com	r24
     ed6:	82 23       	and	r24, r18
     ed8:	80 83       	st	Z, r24
     eda:	08 95       	ret
			case DIO_PORTD : CLR_BIT(PORTD_REG,u8PinId); break;
     edc:	e2 e3       	ldi	r30, 0x32	; 50
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	20 81       	ld	r18, Z
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_VidSetPinVal+0x88>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	6a 95       	dec	r22
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_VidSetPinVal+0x84>
     ef0:	80 95       	com	r24
     ef2:	82 23       	and	r24, r18
     ef4:	80 83       	st	Z, r24
     ef6:	08 95       	ret
			}
		}
		else if(GET_BIT(u8PinVal,0) == DIO_PIN_HIGH)
		{
			switch(u8PortId)
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	a1 f0       	breq	.+40     	; 0xf24 <DIO_VidSetPinVal+0xc0>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	28 f0       	brcs	.+10     	; 0xf0a <DIO_VidSetPinVal+0xa6>
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	e9 f0       	breq	.+58     	; 0xf3e <DIO_VidSetPinVal+0xda>
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	a1 f5       	brne	.+104    	; 0xf70 <DIO_VidSetPinVal+0x10c>
     f08:	27 c0       	rjmp	.+78     	; 0xf58 <DIO_VidSetPinVal+0xf4>
			{
			case DIO_PORTA : SET_BIT(PORTA_REG,u8PinId); break;
     f0a:	eb e3       	ldi	r30, 0x3B	; 59
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	20 81       	ld	r18, Z
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_VidSetPinVal+0xb6>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	6a 95       	dec	r22
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_VidSetPinVal+0xb2>
     f1e:	28 2b       	or	r18, r24
     f20:	20 83       	st	Z, r18
     f22:	08 95       	ret
			case DIO_PORTB : SET_BIT(PORTB_REG,u8PinId); break;
     f24:	e8 e3       	ldi	r30, 0x38	; 56
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	20 81       	ld	r18, Z
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_VidSetPinVal+0xd0>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	6a 95       	dec	r22
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_VidSetPinVal+0xcc>
     f38:	28 2b       	or	r18, r24
     f3a:	20 83       	st	Z, r18
     f3c:	08 95       	ret
			case DIO_PORTC : SET_BIT(PORTC_REG,u8PinId); break;
     f3e:	e5 e3       	ldi	r30, 0x35	; 53
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	20 81       	ld	r18, Z
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_VidSetPinVal+0xea>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	6a 95       	dec	r22
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_VidSetPinVal+0xe6>
     f52:	28 2b       	or	r18, r24
     f54:	20 83       	st	Z, r18
     f56:	08 95       	ret
			case DIO_PORTD : SET_BIT(PORTD_REG,u8PinId); break;
     f58:	e2 e3       	ldi	r30, 0x32	; 50
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	20 81       	ld	r18, Z
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_VidSetPinVal+0x104>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	6a 95       	dec	r22
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_VidSetPinVal+0x100>
     f6c:	28 2b       	or	r18, r24
     f6e:	20 83       	st	Z, r18
     f70:	08 95       	ret

00000f72 <DIO_u8GetPinVal>:
}

u8 DIO_u8GetPinVal(u8 u8PortId, u8 u8PinId)
{
	u8 u8ResultLoc=0;
	if(u8PortId <= DIO_PORTD && u8PinId <= DIO_PIN7)
     f72:	84 30       	cpi	r24, 0x04	; 4
     f74:	80 f5       	brcc	.+96     	; 0xfd6 <DIO_u8GetPinVal+0x64>
     f76:	68 30       	cpi	r22, 0x08	; 8
     f78:	70 f5       	brcc	.+92     	; 0xfd6 <DIO_u8GetPinVal+0x64>
	{
		switch(u8PortId)
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	89 f0       	breq	.+34     	; 0xfa0 <DIO_u8GetPinVal+0x2e>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	30 f0       	brcs	.+12     	; 0xf8e <DIO_u8GetPinVal+0x1c>
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	b1 f0       	breq	.+44     	; 0xfb2 <DIO_u8GetPinVal+0x40>
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	e9 f0       	breq	.+58     	; 0xfc4 <DIO_u8GetPinVal+0x52>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	08 95       	ret
		{
		case DIO_PORTA : u8ResultLoc = GET_BIT(PINA_REG,u8PinId); break;
     f8e:	89 b3       	in	r24, 0x19	; 25
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_u8GetPinVal+0x26>
     f94:	95 95       	asr	r25
     f96:	87 95       	ror	r24
     f98:	6a 95       	dec	r22
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_u8GetPinVal+0x22>
     f9c:	81 70       	andi	r24, 0x01	; 1
     f9e:	08 95       	ret
		case DIO_PORTB : u8ResultLoc = GET_BIT(PINB_REG,u8PinId); break;
     fa0:	86 b3       	in	r24, 0x16	; 22
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_u8GetPinVal+0x38>
     fa6:	95 95       	asr	r25
     fa8:	87 95       	ror	r24
     faa:	6a 95       	dec	r22
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_u8GetPinVal+0x34>
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	08 95       	ret
		case DIO_PORTC : u8ResultLoc = GET_BIT(PINC_REG,u8PinId); break;
     fb2:	83 b3       	in	r24, 0x13	; 19
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_u8GetPinVal+0x4a>
     fb8:	95 95       	asr	r25
     fba:	87 95       	ror	r24
     fbc:	6a 95       	dec	r22
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_u8GetPinVal+0x46>
     fc0:	81 70       	andi	r24, 0x01	; 1
     fc2:	08 95       	ret
		case DIO_PORTD : u8ResultLoc = GET_BIT(PIND_REG,u8PinId); break;
     fc4:	80 b3       	in	r24, 0x10	; 16
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_u8GetPinVal+0x5c>
     fca:	95 95       	asr	r25
     fcc:	87 95       	ror	r24
     fce:	6a 95       	dec	r22
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_u8GetPinVal+0x58>
     fd2:	81 70       	andi	r24, 0x01	; 1
     fd4:	08 95       	ret
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
		u8ResultLoc = DIO_UNDEF_VAL;
		/* Wrong PORT ID or PIN ID*/
	}
	return u8ResultLoc;

}
     fd8:	08 95       	ret

00000fda <DIO_VidTogglePinVal>:

void DIO_VidTogglePinVal(u8 u8PortId, u8 u8PinId)
{
	if(u8PortId <= DIO_PORTD && u8PinId <= DIO_PIN7)
     fda:	84 30       	cpi	r24, 0x04	; 4
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <DIO_VidTogglePinVal+0x6>
     fde:	3f c0       	rjmp	.+126    	; 0x105e <DIO_VidTogglePinVal+0x84>
     fe0:	68 30       	cpi	r22, 0x08	; 8
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <DIO_VidTogglePinVal+0xc>
     fe4:	3c c0       	rjmp	.+120    	; 0x105e <DIO_VidTogglePinVal+0x84>
	{
		switch(u8PortId)
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	a1 f0       	breq	.+40     	; 0x1012 <DIO_VidTogglePinVal+0x38>
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	28 f0       	brcs	.+10     	; 0xff8 <DIO_VidTogglePinVal+0x1e>
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	e9 f0       	breq	.+58     	; 0x102c <DIO_VidTogglePinVal+0x52>
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	a1 f5       	brne	.+104    	; 0x105e <DIO_VidTogglePinVal+0x84>
     ff6:	27 c0       	rjmp	.+78     	; 0x1046 <DIO_VidTogglePinVal+0x6c>
		{
		case DIO_PORTA : TOGGLE_BIT(PORTA_REG,u8PinId); break;
     ff8:	eb e3       	ldi	r30, 0x3B	; 59
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	20 81       	ld	r18, Z
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_VidTogglePinVal+0x2e>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	6a 95       	dec	r22
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_VidTogglePinVal+0x2a>
    100c:	28 27       	eor	r18, r24
    100e:	20 83       	st	Z, r18
    1010:	08 95       	ret
		case DIO_PORTB : TOGGLE_BIT(PORTB_REG,u8PinId); break;
    1012:	e8 e3       	ldi	r30, 0x38	; 56
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	20 81       	ld	r18, Z
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_VidTogglePinVal+0x48>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	6a 95       	dec	r22
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_VidTogglePinVal+0x44>
    1026:	28 27       	eor	r18, r24
    1028:	20 83       	st	Z, r18
    102a:	08 95       	ret
		case DIO_PORTC : TOGGLE_BIT(PORTC_REG,u8PinId); break;
    102c:	e5 e3       	ldi	r30, 0x35	; 53
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	20 81       	ld	r18, Z
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_VidTogglePinVal+0x62>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	6a 95       	dec	r22
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_VidTogglePinVal+0x5e>
    1040:	28 27       	eor	r18, r24
    1042:	20 83       	st	Z, r18
    1044:	08 95       	ret
		case DIO_PORTD : TOGGLE_BIT(PORTD_REG,u8PinId); break;
    1046:	e2 e3       	ldi	r30, 0x32	; 50
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	20 81       	ld	r18, Z
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_VidTogglePinVal+0x7c>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	6a 95       	dec	r22
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_VidTogglePinVal+0x78>
    105a:	28 27       	eor	r18, r24
    105c:	20 83       	st	Z, r18
    105e:	08 95       	ret

00001060 <DIO_VidEnablePullUpRes>:
	}
}

void DIO_VidEnablePullUpRes(u8 u8PortId, u8 u8PinId)
{
	if(u8PortId <= DIO_PORTD && u8PinId <= DIO_PIN7)
    1060:	84 30       	cpi	r24, 0x04	; 4
    1062:	08 f0       	brcs	.+2      	; 0x1066 <DIO_VidEnablePullUpRes+0x6>
    1064:	3f c0       	rjmp	.+126    	; 0x10e4 <DIO_VidEnablePullUpRes+0x84>
    1066:	68 30       	cpi	r22, 0x08	; 8
    1068:	08 f0       	brcs	.+2      	; 0x106c <DIO_VidEnablePullUpRes+0xc>
    106a:	3c c0       	rjmp	.+120    	; 0x10e4 <DIO_VidEnablePullUpRes+0x84>
	{
		switch(u8PortId)
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a1 f0       	breq	.+40     	; 0x1098 <DIO_VidEnablePullUpRes+0x38>
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	28 f0       	brcs	.+10     	; 0x107e <DIO_VidEnablePullUpRes+0x1e>
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	e9 f0       	breq	.+58     	; 0x10b2 <DIO_VidEnablePullUpRes+0x52>
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	a1 f5       	brne	.+104    	; 0x10e4 <DIO_VidEnablePullUpRes+0x84>
    107c:	27 c0       	rjmp	.+78     	; 0x10cc <DIO_VidEnablePullUpRes+0x6c>
		{
		case DIO_PORTA : SET_BIT(PORTA_REG,u8PinId); break;
    107e:	eb e3       	ldi	r30, 0x3B	; 59
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	20 81       	ld	r18, Z
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_VidEnablePullUpRes+0x2e>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	6a 95       	dec	r22
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_VidEnablePullUpRes+0x2a>
    1092:	28 2b       	or	r18, r24
    1094:	20 83       	st	Z, r18
    1096:	08 95       	ret
		case DIO_PORTB : SET_BIT(PORTB_REG,u8PinId); break;
    1098:	e8 e3       	ldi	r30, 0x38	; 56
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	20 81       	ld	r18, Z
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_VidEnablePullUpRes+0x48>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	6a 95       	dec	r22
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_VidEnablePullUpRes+0x44>
    10ac:	28 2b       	or	r18, r24
    10ae:	20 83       	st	Z, r18
    10b0:	08 95       	ret
		case DIO_PORTC : SET_BIT(PORTC_REG,u8PinId); break;
    10b2:	e5 e3       	ldi	r30, 0x35	; 53
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	20 81       	ld	r18, Z
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_VidEnablePullUpRes+0x62>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	6a 95       	dec	r22
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_VidEnablePullUpRes+0x5e>
    10c6:	28 2b       	or	r18, r24
    10c8:	20 83       	st	Z, r18
    10ca:	08 95       	ret
		case DIO_PORTD : SET_BIT(PORTD_REG,u8PinId); break;
    10cc:	e2 e3       	ldi	r30, 0x32	; 50
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	20 81       	ld	r18, Z
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_VidEnablePullUpRes+0x7c>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	6a 95       	dec	r22
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_VidEnablePullUpRes+0x78>
    10e0:	28 2b       	or	r18, r24
    10e2:	20 83       	st	Z, r18
    10e4:	08 95       	ret

000010e6 <DIO_VidSetPortDir>:
	}
}

void DIO_VidSetPortDir(u8 u8PortId, u8 u8PortDir)
{
	switch(u8PortId)
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	49 f0       	breq	.+18     	; 0x10fc <DIO_VidSetPortDir+0x16>
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	28 f0       	brcs	.+10     	; 0x10f8 <DIO_VidSetPortDir+0x12>
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	39 f0       	breq	.+14     	; 0x1100 <DIO_VidSetPortDir+0x1a>
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	41 f4       	brne	.+16     	; 0x1106 <DIO_VidSetPortDir+0x20>
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <DIO_VidSetPortDir+0x1e>
	{
	case DIO_PORTA : DDRA_REG = u8PortDir; break;
    10f8:	6a bb       	out	0x1a, r22	; 26
    10fa:	08 95       	ret
	case DIO_PORTB : DDRB_REG = u8PortDir; break;
    10fc:	67 bb       	out	0x17, r22	; 23
    10fe:	08 95       	ret
	case DIO_PORTC : DDRC_REG = u8PortDir; break;
    1100:	64 bb       	out	0x14, r22	; 20
    1102:	08 95       	ret
	case DIO_PORTD : DDRD_REG = u8PortDir; break;
    1104:	61 bb       	out	0x11, r22	; 17
    1106:	08 95       	ret

00001108 <DIO_VidSetPortVal>:
	}
}

void DIO_VidSetPortVal(u8 u8PortId, u8 u8PortVal)
{
	switch(u8PortId)
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	49 f0       	breq	.+18     	; 0x111e <DIO_VidSetPortVal+0x16>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	28 f0       	brcs	.+10     	; 0x111a <DIO_VidSetPortVal+0x12>
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	39 f0       	breq	.+14     	; 0x1122 <DIO_VidSetPortVal+0x1a>
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	41 f4       	brne	.+16     	; 0x1128 <DIO_VidSetPortVal+0x20>
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <DIO_VidSetPortVal+0x1e>
	{
	case DIO_PORTA : PORTA_REG = u8PortVal; break;
    111a:	6b bb       	out	0x1b, r22	; 27
    111c:	08 95       	ret
	case DIO_PORTB : PORTB_REG = u8PortVal; break;
    111e:	68 bb       	out	0x18, r22	; 24
    1120:	08 95       	ret
	case DIO_PORTC : PORTC_REG = u8PortVal; break;
    1122:	65 bb       	out	0x15, r22	; 21
    1124:	08 95       	ret
	case DIO_PORTD : PORTD_REG = u8PortVal; break;
    1126:	62 bb       	out	0x12, r22	; 18
    1128:	08 95       	ret

0000112a <Priv_S32Power>:

#define EIGHT_BIT_INTERFACE_OPERATION		0
#define FOUR_BIT_INTERFACE_OPERATION		1

s32 Priv_S32Power(s32 s32CopyNum, s32 s32CopyPower)
{
    112a:	8f 92       	push	r8
    112c:	9f 92       	push	r9
    112e:	af 92       	push	r10
    1130:	bf 92       	push	r11
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	1f 93       	push	r17
    113c:	4b 01       	movw	r8, r22
    113e:	5c 01       	movw	r10, r24
    1140:	69 01       	movw	r12, r18
    1142:	7a 01       	movw	r14, r20
	s32 s32LocResult = 1;
	for(u8 u8LocCounter = 1; u8LocCounter<=s32CopyPower; u8LocCounter++)
    1144:	12 16       	cp	r1, r18
    1146:	13 06       	cpc	r1, r19
    1148:	14 06       	cpc	r1, r20
    114a:	15 06       	cpc	r1, r21
    114c:	2c f0       	brlt	.+10     	; 0x1158 <Priv_S32Power+0x2e>
    114e:	21 e0       	ldi	r18, 0x01	; 1
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	17 c0       	rjmp	.+46     	; 0x1186 <Priv_S32Power+0x5c>
    1158:	21 e0       	ldi	r18, 0x01	; 1
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	11 e0       	ldi	r17, 0x01	; 1
	{
		s32LocResult *= s32CopyNum;
    1162:	ca 01       	movw	r24, r20
    1164:	b9 01       	movw	r22, r18
    1166:	a5 01       	movw	r20, r10
    1168:	94 01       	movw	r18, r8
    116a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsi3>
    116e:	9b 01       	movw	r18, r22
    1170:	ac 01       	movw	r20, r24
#define FOUR_BIT_INTERFACE_OPERATION		1

s32 Priv_S32Power(s32 s32CopyNum, s32 s32CopyPower)
{
	s32 s32LocResult = 1;
	for(u8 u8LocCounter = 1; u8LocCounter<=s32CopyPower; u8LocCounter++)
    1172:	1f 5f       	subi	r17, 0xFF	; 255
    1174:	81 2f       	mov	r24, r17
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	c8 16       	cp	r12, r24
    117e:	d9 06       	cpc	r13, r25
    1180:	ea 06       	cpc	r14, r26
    1182:	fb 06       	cpc	r15, r27
    1184:	74 f7       	brge	.-36     	; 0x1162 <Priv_S32Power+0x38>
	{
		s32LocResult *= s32CopyNum;
	}
	return s32LocResult;
}
    1186:	62 2f       	mov	r22, r18
    1188:	73 2f       	mov	r23, r19
    118a:	84 2f       	mov	r24, r20
    118c:	95 2f       	mov	r25, r21
    118e:	1f 91       	pop	r17
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	08 95       	ret

000011a2 <LCD_VidSendChar>:
#endif
}

/* Send Characters to LCD*/
void LCD_VidSendChar(u8 u8CopyChar)
{
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	18 2f       	mov	r17, r24
	DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_LOW);

#elif LCD_INTERFACE_OPERATION == FOUR_BIT_INTERFACE_OPERATION

	/* CLR RS PIN */
	DIO_VidSetPinVal(LCD_RS_PORTX,LCD_RS_PINX,DIO_HIGH);
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	4f ef       	ldi	r20, 0xFF	; 255
    11b6:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

	/* CLR RW PIN*/
	DIO_VidSetPinVal(LCD_RW_PORTX,LCD_RW_PINX,DIO_LOW);
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    11c4:	c4 e0       	ldi	r28, 0x04	; 4
    11c6:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11c8:	0f 2e       	mov	r0, r31
    11ca:	f0 ed       	ldi	r31, 0xD0	; 208
    11cc:	ef 2e       	mov	r14, r31
    11ce:	f7 e0       	ldi	r31, 0x07	; 7
    11d0:	ff 2e       	mov	r15, r31
    11d2:	f0 2d       	mov	r31, r0
		 /*SET E PIN TO HIGH*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_HIGH);
		_delay_ms(1);

		 /*LOAD THE COMMAND*/
		DIO_VidSetPinVal(LCD_DATA_PIN4_PORTX,LCD_DATA_PIN4_PINX,GET_BIT(u8CopyChar,(4-i*4)));
    11d4:	01 2f       	mov	r16, r17
    11d6:	10 e0       	ldi	r17, 0x00	; 0
	DIO_VidSetPinVal(LCD_RW_PORTX,LCD_RW_PINX,DIO_LOW);

	for(u8 i = 0; i<=1; i++)
	{
		 /*SET E PIN TO HIGH*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_HIGH);
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	62 e0       	ldi	r22, 0x02	; 2
    11dc:	4f ef       	ldi	r20, 0xFF	; 255
    11de:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    11e2:	c7 01       	movw	r24, r14
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <LCD_VidSendChar+0x42>
		_delay_ms(1);

		 /*LOAD THE COMMAND*/
		DIO_VidSetPinVal(LCD_DATA_PIN4_PORTX,LCD_DATA_PIN4_PINX,GET_BIT(u8CopyChar,(4-i*4)));
    11e8:	a8 01       	movw	r20, r16
    11ea:	0c 2e       	mov	r0, r28
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <LCD_VidSendChar+0x50>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <LCD_VidSendChar+0x4c>
    11f6:	41 70       	andi	r20, 0x01	; 1
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	64 e0       	ldi	r22, 0x04	; 4
    11fc:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
		DIO_VidSetPinVal(LCD_DATA_PIN5_PORTX,LCD_DATA_PIN5_PINX,GET_BIT(u8CopyChar,(5-i*4)));
    1200:	ae 01       	movw	r20, r28
    1202:	4f 5f       	subi	r20, 0xFF	; 255
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	c8 01       	movw	r24, r16
    1208:	02 c0       	rjmp	.+4      	; 0x120e <LCD_VidSendChar+0x6c>
    120a:	95 95       	asr	r25
    120c:	87 95       	ror	r24
    120e:	4a 95       	dec	r20
    1210:	e2 f7       	brpl	.-8      	; 0x120a <LCD_VidSendChar+0x68>
    1212:	ac 01       	movw	r20, r24
    1214:	41 70       	andi	r20, 0x01	; 1
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	65 e0       	ldi	r22, 0x05	; 5
    121a:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
		DIO_VidSetPinVal(LCD_DATA_PIN6_PORTX,LCD_DATA_PIN6_PINX,GET_BIT(u8CopyChar,(6-i*4)));
    121e:	ae 01       	movw	r20, r28
    1220:	4e 5f       	subi	r20, 0xFE	; 254
    1222:	5f 4f       	sbci	r21, 0xFF	; 255
    1224:	c8 01       	movw	r24, r16
    1226:	02 c0       	rjmp	.+4      	; 0x122c <LCD_VidSendChar+0x8a>
    1228:	95 95       	asr	r25
    122a:	87 95       	ror	r24
    122c:	4a 95       	dec	r20
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <LCD_VidSendChar+0x86>
    1230:	ac 01       	movw	r20, r24
    1232:	41 70       	andi	r20, 0x01	; 1
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	66 e0       	ldi	r22, 0x06	; 6
    1238:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
		DIO_VidSetPinVal(LCD_DATA_PIN7_PORTX,LCD_DATA_PIN7_PINX,GET_BIT(u8CopyChar,(7-i*4)));
    123c:	ae 01       	movw	r20, r28
    123e:	4d 5f       	subi	r20, 0xFD	; 253
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	c8 01       	movw	r24, r16
    1244:	02 c0       	rjmp	.+4      	; 0x124a <LCD_VidSendChar+0xa8>
    1246:	95 95       	asr	r25
    1248:	87 95       	ror	r24
    124a:	4a 95       	dec	r20
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <LCD_VidSendChar+0xa4>
    124e:	ac 01       	movw	r20, r24
    1250:	41 70       	andi	r20, 0x01	; 1
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	67 e0       	ldi	r22, 0x07	; 7
    1256:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

		 /*CLR E PIN*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_LOW);
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	62 e0       	ldi	r22, 0x02	; 2
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    1264:	24 97       	sbiw	r28, 0x04	; 4
	DIO_VidSetPinVal(LCD_RS_PORTX,LCD_RS_PINX,DIO_HIGH);

	/* CLR RW PIN*/
	DIO_VidSetPinVal(LCD_RW_PORTX,LCD_RW_PINX,DIO_LOW);

	for(u8 i = 0; i<=1; i++)
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	cc 3f       	cpi	r28, 0xFC	; 252
    126a:	d9 07       	cpc	r29, r25
    126c:	09 f0       	breq	.+2      	; 0x1270 <LCD_VidSendChar+0xce>
    126e:	b4 cf       	rjmp	.-152    	; 0x11d8 <LCD_VidSendChar+0x36>
		 /*CLR E PIN*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_LOW);
	}

#endif
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	08 95       	ret

0000127e <LCD_VidWriteNum>:
	}
}

/* Write Integer Number On LCD*/
void LCD_VidWriteNum(s32 s32CopyNum)
{
    127e:	6f 92       	push	r6
    1280:	7f 92       	push	r7
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
	if(s32CopyNum==0)
    129c:	61 15       	cp	r22, r1
    129e:	71 05       	cpc	r23, r1
    12a0:	81 05       	cpc	r24, r1
    12a2:	91 05       	cpc	r25, r1
    12a4:	21 f4       	brne	.+8      	; 0x12ae <LCD_VidWriteNum+0x30>
	{
		LCD_VidSendChar('0');
    12a6:	80 e3       	ldi	r24, 0x30	; 48
    12a8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
    12ac:	74 c0       	rjmp	.+232    	; 0x1396 <LCD_VidWriteNum+0x118>
	}
	else
	{
		if(s32CopyNum<0)
    12ae:	99 23       	and	r25, r25
    12b0:	24 f0       	brlt	.+8      	; 0x12ba <LCD_VidWriteNum+0x3c>
    12b2:	c6 01       	movw	r24, r12
    12b4:	b5 01       	movw	r22, r10
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <LCD_VidWriteNum+0x5e>
		{
			LCD_VidSendChar('-');
    12ba:	8d e2       	ldi	r24, 0x2D	; 45
    12bc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
			s32CopyNum *= -1;
    12c0:	d0 94       	com	r13
    12c2:	c0 94       	com	r12
    12c4:	b0 94       	com	r11
    12c6:	a0 94       	com	r10
    12c8:	a1 1c       	adc	r10, r1
    12ca:	b1 1c       	adc	r11, r1
    12cc:	c1 1c       	adc	r12, r1
    12ce:	d1 1c       	adc	r13, r1
		}
		u8 u8LocNumOfDigits = 0;
		s32 s32LocTemp = 0;
		s32 s32LocCopyNum = s32CopyNum;
		while (s32LocCopyNum != 0)
    12d0:	a1 14       	cp	r10, r1
    12d2:	b1 04       	cpc	r11, r1
    12d4:	c1 04       	cpc	r12, r1
    12d6:	d1 04       	cpc	r13, r1
    12d8:	61 f7       	brne	.-40     	; 0x12b2 <LCD_VidWriteNum+0x34>
    12da:	5d c0       	rjmp	.+186    	; 0x1396 <LCD_VidWriteNum+0x118>
		{
			u8LocNumOfDigits++;
    12dc:	1f 5f       	subi	r17, 0xFF	; 255
			s32LocCopyNum /= 10;
    12de:	2a e0       	ldi	r18, 0x0A	; 10
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__divmodsi4>
    12ea:	82 2f       	mov	r24, r18
    12ec:	93 2f       	mov	r25, r19
    12ee:	a4 2f       	mov	r26, r20
    12f0:	b5 2f       	mov	r27, r21
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
			s32CopyNum *= -1;
		}
		u8 u8LocNumOfDigits = 0;
		s32 s32LocTemp = 0;
		s32 s32LocCopyNum = s32CopyNum;
		while (s32LocCopyNum != 0)
    12f6:	61 15       	cp	r22, r1
    12f8:	71 05       	cpc	r23, r1
    12fa:	81 05       	cpc	r24, r1
    12fc:	91 05       	cpc	r25, r1
    12fe:	71 f7       	brne	.-36     	; 0x12dc <LCD_VidWriteNum+0x5e>
		{
			u8LocNumOfDigits++;
			s32LocCopyNum /= 10;
		}
		for(s8 u8LocCounter = u8LocNumOfDigits; u8LocCounter>0; u8LocCounter--)
    1300:	91 2e       	mov	r9, r17
    1302:	11 16       	cp	r1, r17
    1304:	0c f0       	brlt	.+2      	; 0x1308 <LCD_VidWriteNum+0x8a>
    1306:	47 c0       	rjmp	.+142    	; 0x1396 <LCD_VidWriteNum+0x118>
		{
			s32LocTemp = s32CopyNum / (Priv_S32Power(10,u8LocCounter-1)) ;
			LCD_VidSendChar(s32LocTemp+'0');
			s32CopyNum = s32CopyNum % (Priv_S32Power(10,u8LocCounter-1)) ;
    1308:	0f 2e       	mov	r0, r31
    130a:	f4 ef       	ldi	r31, 0xF4	; 244
    130c:	6f 2e       	mov	r6, r31
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	7f 2e       	mov	r7, r31
    1312:	f0 2d       	mov	r31, r0
    1314:	c8 ec       	ldi	r28, 0xC8	; 200
    1316:	d0 e0       	ldi	r29, 0x00	; 0
			u8LocNumOfDigits++;
			s32LocCopyNum /= 10;
		}
		for(s8 u8LocCounter = u8LocNumOfDigits; u8LocCounter>0; u8LocCounter--)
		{
			s32LocTemp = s32CopyNum / (Priv_S32Power(10,u8LocCounter-1)) ;
    1318:	e9 2c       	mov	r14, r9
    131a:	ff 24       	eor	r15, r15
    131c:	e7 fc       	sbrc	r14, 7
    131e:	f0 94       	com	r15
    1320:	08 94       	sec
    1322:	e1 08       	sbc	r14, r1
    1324:	f1 08       	sbc	r15, r1
    1326:	00 27       	eor	r16, r16
    1328:	f7 fc       	sbrc	r15, 7
    132a:	00 95       	com	r16
    132c:	10 2f       	mov	r17, r16
    132e:	6a e0       	ldi	r22, 0x0A	; 10
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a8 01       	movw	r20, r16
    1338:	97 01       	movw	r18, r14
    133a:	0e 94 95 08 	call	0x112a	; 0x112a <Priv_S32Power>
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
			LCD_VidSendChar(s32LocTemp+'0');
    1342:	c6 01       	movw	r24, r12
    1344:	b5 01       	movw	r22, r10
    1346:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__divmodsi4>
    134a:	82 2f       	mov	r24, r18
    134c:	80 5d       	subi	r24, 0xD0	; 208
    134e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
			s32CopyNum = s32CopyNum % (Priv_S32Power(10,u8LocCounter-1)) ;
    1352:	6a e0       	ldi	r22, 0x0A	; 10
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a8 01       	movw	r20, r16
    135c:	97 01       	movw	r18, r14
    135e:	0e 94 95 08 	call	0x112a	; 0x112a <Priv_S32Power>
    1362:	9b 01       	movw	r18, r22
    1364:	ac 01       	movw	r20, r24
    1366:	c6 01       	movw	r24, r12
    1368:	b5 01       	movw	r22, r10
    136a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__divmodsi4>
    136e:	37 2f       	mov	r19, r23
    1370:	48 2f       	mov	r20, r24
    1372:	59 2f       	mov	r21, r25
    1374:	86 2f       	mov	r24, r22
    1376:	93 2f       	mov	r25, r19
    1378:	a4 2f       	mov	r26, r20
    137a:	b5 2f       	mov	r27, r21
    137c:	5c 01       	movw	r10, r24
    137e:	6d 01       	movw	r12, r26
    1380:	93 01       	movw	r18, r6
    1382:	ce 01       	movw	r24, r28
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <LCD_VidWriteNum+0x106>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1388:	21 50       	subi	r18, 0x01	; 1
    138a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	d1 f7       	brne	.-12     	; 0x1382 <LCD_VidWriteNum+0x104>
		while (s32LocCopyNum != 0)
		{
			u8LocNumOfDigits++;
			s32LocCopyNum /= 10;
		}
		for(s8 u8LocCounter = u8LocNumOfDigits; u8LocCounter>0; u8LocCounter--)
    138e:	9a 94       	dec	r9
    1390:	19 14       	cp	r1, r9
    1392:	0c f4       	brge	.+2      	; 0x1396 <LCD_VidWriteNum+0x118>
    1394:	c1 cf       	rjmp	.-126    	; 0x1318 <LCD_VidWriteNum+0x9a>
			LCD_VidSendChar(s32LocTemp+'0');
			s32CopyNum = s32CopyNum % (Priv_S32Power(10,u8LocCounter-1)) ;
			_delay_ms(50);
		}
	}
}
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	7f 90       	pop	r7
    13ae:	6f 90       	pop	r6
    13b0:	08 95       	ret

000013b2 <LCD_VidWriteFloatNum>:

/* Write Float Number On LCD*/
void LCD_VidWriteFloatNum(f32 f32CopyFloatNum)
{
    13b2:	9f 92       	push	r9
    13b4:	af 92       	push	r10
    13b6:	bf 92       	push	r11
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	7b 01       	movw	r14, r22
    13c6:	8c 01       	movw	r16, r24
	s32 s32CopyIntNum = f32CopyFloatNum;
    13c8:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixsfsi>
    13cc:	5b 01       	movw	r10, r22
    13ce:	6c 01       	movw	r12, r24
	f32 f32CopyFloatR = f32CopyFloatNum - s32CopyIntNum;
    13d0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__floatsisf>
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	c8 01       	movw	r24, r16
    13da:	b7 01       	movw	r22, r14
    13dc:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    13e0:	7b 01       	movw	r14, r22
    13e2:	8c 01       	movw	r16, r24
	if(f32CopyFloatR<0)
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	0e 94 c9 03 	call	0x792	; 0x792 <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	64 f4       	brge	.+24     	; 0x140c <LCD_VidWriteFloatNum+0x5a>
	{
		f32CopyFloatR *= -1;
    13f4:	17 fb       	bst	r17, 7
    13f6:	10 95       	com	r17
    13f8:	17 f9       	bld	r17, 7
    13fa:	10 95       	com	r17
		if(s32CopyIntNum==0)
    13fc:	a1 14       	cp	r10, r1
    13fe:	b1 04       	cpc	r11, r1
    1400:	c1 04       	cpc	r12, r1
    1402:	d1 04       	cpc	r13, r1
    1404:	19 f4       	brne	.+6      	; 0x140c <LCD_VidWriteFloatNum+0x5a>
		{
			LCD_VidSendChar('-');
    1406:	8d e2       	ldi	r24, 0x2D	; 45
    1408:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
		}
	}
	LCD_VidWriteNum(s32CopyIntNum);
    140c:	c6 01       	movw	r24, r12
    140e:	b5 01       	movw	r22, r10
    1410:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_VidWriteNum>
	if(f32CopyFloatR!=0)
    1414:	c8 01       	movw	r24, r16
    1416:	b7 01       	movw	r22, r14
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	0e 94 99 03 	call	0x732	; 0x732 <__nesf2>
    1424:	88 23       	and	r24, r24
    1426:	21 f1       	breq	.+72     	; 0x1470 <LCD_VidWriteFloatNum+0xbe>
	{
		LCD_VidSendChar('.');
    1428:	8e e2       	ldi	r24, 0x2E	; 46
    142a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
    142e:	99 24       	eor	r9, r9
		for(s8 u8LocCounter = 0; u8LocCounter<=2; u8LocCounter++)
		{
			f32CopyFloatR *= 10;
    1430:	c8 01       	movw	r24, r16
    1432:	b7 01       	movw	r22, r14
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    1440:	7b 01       	movw	r14, r22
    1442:	8c 01       	movw	r16, r24
			LCD_VidWriteNum((s32)f32CopyFloatR);
    1444:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixsfsi>
    1448:	5b 01       	movw	r10, r22
    144a:	6c 01       	movw	r12, r24
    144c:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_VidWriteNum>
			f32CopyFloatR -= (s32)f32CopyFloatR;
    1450:	c6 01       	movw	r24, r12
    1452:	b5 01       	movw	r22, r10
    1454:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__floatsisf>
    1458:	9b 01       	movw	r18, r22
    145a:	ac 01       	movw	r20, r24
    145c:	c8 01       	movw	r24, r16
    145e:	b7 01       	movw	r22, r14
    1460:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    1464:	7b 01       	movw	r14, r22
    1466:	8c 01       	movw	r16, r24
	}
	LCD_VidWriteNum(s32CopyIntNum);
	if(f32CopyFloatR!=0)
	{
		LCD_VidSendChar('.');
		for(s8 u8LocCounter = 0; u8LocCounter<=2; u8LocCounter++)
    1468:	93 94       	inc	r9
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	98 16       	cp	r9, r24
    146e:	01 f7       	brne	.-64     	; 0x1430 <LCD_VidWriteFloatNum+0x7e>
			f32CopyFloatR *= 10;
			LCD_VidWriteNum((s32)f32CopyFloatR);
			f32CopyFloatR -= (s32)f32CopyFloatR;
		}
	}
}
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	9f 90       	pop	r9
    1482:	08 95       	ret

00001484 <LCD_VidSendStr>:
#endif
}

/* Send String to LCD*/
void LCD_VidSendStr(u8* pu8Str)
{
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
	u8 Counter = 0;
	while (pu8Str[Counter]!=0)
    148c:	88 81       	ld	r24, Y
    148e:	88 23       	and	r24, r24
    1490:	51 f0       	breq	.+20     	; 0x14a6 <LCD_VidSendStr+0x22>
    1492:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_VidSendChar(pu8Str[Counter]);
    1494:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
		Counter++;
    1498:	1f 5f       	subi	r17, 0xFF	; 255

/* Send String to LCD*/
void LCD_VidSendStr(u8* pu8Str)
{
	u8 Counter = 0;
	while (pu8Str[Counter]!=0)
    149a:	fe 01       	movw	r30, r28
    149c:	e1 0f       	add	r30, r17
    149e:	f1 1d       	adc	r31, r1
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	b9 f7       	brne	.-18     	; 0x1494 <LCD_VidSendStr+0x10>
	{
		LCD_VidSendChar(pu8Str[Counter]);
		Counter++;
	}
}
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	08 95       	ret

000014ae <LCD_VidSendCmd>:
#endif
}

/* Send Commands to LCD*/
void LCD_VidSendCmd(u8 u8CopyCmd)
{
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	18 2f       	mov	r17, r24
	DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_LOW);

#elif LCD_INTERFACE_OPERATION == FOUR_BIT_INTERFACE_OPERATION

	/* CLR RS PIN */
	DIO_VidSetPinVal(LCD_RS_PORTX,LCD_RS_PINX,DIO_LOW);
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

	/* CLR RW PIN*/
	DIO_VidSetPinVal(LCD_RW_PORTX,LCD_RW_PINX,DIO_LOW);
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	61 e0       	ldi	r22, 0x01	; 1
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    14d0:	c4 e0       	ldi	r28, 0x04	; 4
    14d2:	d0 e0       	ldi	r29, 0x00	; 0
    14d4:	0f 2e       	mov	r0, r31
    14d6:	f0 ed       	ldi	r31, 0xD0	; 208
    14d8:	ef 2e       	mov	r14, r31
    14da:	f7 e0       	ldi	r31, 0x07	; 7
    14dc:	ff 2e       	mov	r15, r31
    14de:	f0 2d       	mov	r31, r0
		/* SET E PIN TO HIGH*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_HIGH);
		_delay_ms(1);

		/*LOAD THE COMMAND*/
		DIO_VidSetPinVal(LCD_DATA_PIN4_PORTX,LCD_DATA_PIN4_PINX,GET_BIT(u8CopyCmd,(4-i*4)));
    14e0:	01 2f       	mov	r16, r17
    14e2:	10 e0       	ldi	r17, 0x00	; 0
	DIO_VidSetPinVal(LCD_RW_PORTX,LCD_RW_PINX,DIO_LOW);

	for(u8 i = 0; i<=1; i++)
	{
		/* SET E PIN TO HIGH*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_HIGH);
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	62 e0       	ldi	r22, 0x02	; 2
    14e8:	4f ef       	ldi	r20, 0xFF	; 255
    14ea:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    14ee:	c7 01       	movw	r24, r14
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <LCD_VidSendCmd+0x42>
		_delay_ms(1);

		/*LOAD THE COMMAND*/
		DIO_VidSetPinVal(LCD_DATA_PIN4_PORTX,LCD_DATA_PIN4_PINX,GET_BIT(u8CopyCmd,(4-i*4)));
    14f4:	a8 01       	movw	r20, r16
    14f6:	0c 2e       	mov	r0, r28
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <LCD_VidSendCmd+0x50>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <LCD_VidSendCmd+0x4c>
    1502:	41 70       	andi	r20, 0x01	; 1
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	64 e0       	ldi	r22, 0x04	; 4
    1508:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
		DIO_VidSetPinVal(LCD_DATA_PIN5_PORTX,LCD_DATA_PIN5_PINX,GET_BIT(u8CopyCmd,(5-i*4)));
    150c:	ae 01       	movw	r20, r28
    150e:	4f 5f       	subi	r20, 0xFF	; 255
    1510:	5f 4f       	sbci	r21, 0xFF	; 255
    1512:	c8 01       	movw	r24, r16
    1514:	02 c0       	rjmp	.+4      	; 0x151a <LCD_VidSendCmd+0x6c>
    1516:	95 95       	asr	r25
    1518:	87 95       	ror	r24
    151a:	4a 95       	dec	r20
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <LCD_VidSendCmd+0x68>
    151e:	ac 01       	movw	r20, r24
    1520:	41 70       	andi	r20, 0x01	; 1
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	65 e0       	ldi	r22, 0x05	; 5
    1526:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
		DIO_VidSetPinVal(LCD_DATA_PIN6_PORTX,LCD_DATA_PIN6_PINX,GET_BIT(u8CopyCmd,(6-i*4)));
    152a:	ae 01       	movw	r20, r28
    152c:	4e 5f       	subi	r20, 0xFE	; 254
    152e:	5f 4f       	sbci	r21, 0xFF	; 255
    1530:	c8 01       	movw	r24, r16
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <LCD_VidSendCmd+0x8a>
    1534:	95 95       	asr	r25
    1536:	87 95       	ror	r24
    1538:	4a 95       	dec	r20
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <LCD_VidSendCmd+0x86>
    153c:	ac 01       	movw	r20, r24
    153e:	41 70       	andi	r20, 0x01	; 1
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	66 e0       	ldi	r22, 0x06	; 6
    1544:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
		DIO_VidSetPinVal(LCD_DATA_PIN7_PORTX,LCD_DATA_PIN7_PINX,GET_BIT(u8CopyCmd,(7-i*4)));
    1548:	ae 01       	movw	r20, r28
    154a:	4d 5f       	subi	r20, 0xFD	; 253
    154c:	5f 4f       	sbci	r21, 0xFF	; 255
    154e:	c8 01       	movw	r24, r16
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <LCD_VidSendCmd+0xa8>
    1552:	95 95       	asr	r25
    1554:	87 95       	ror	r24
    1556:	4a 95       	dec	r20
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <LCD_VidSendCmd+0xa4>
    155a:	ac 01       	movw	r20, r24
    155c:	41 70       	andi	r20, 0x01	; 1
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	67 e0       	ldi	r22, 0x07	; 7
    1562:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

		/* CLR E PIN*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_LOW);
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	62 e0       	ldi	r22, 0x02	; 2
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    1570:	24 97       	sbiw	r28, 0x04	; 4
	DIO_VidSetPinVal(LCD_RS_PORTX,LCD_RS_PINX,DIO_LOW);

	/* CLR RW PIN*/
	DIO_VidSetPinVal(LCD_RW_PORTX,LCD_RW_PINX,DIO_LOW);

	for(u8 i = 0; i<=1; i++)
    1572:	9f ef       	ldi	r25, 0xFF	; 255
    1574:	cc 3f       	cpi	r28, 0xFC	; 252
    1576:	d9 07       	cpc	r29, r25
    1578:	09 f0       	breq	.+2      	; 0x157c <LCD_VidSendCmd+0xce>
    157a:	b4 cf       	rjmp	.-152    	; 0x14e4 <LCD_VidSendCmd+0x36>
		/* CLR E PIN*/
		DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_LOW);
	}

#endif
}
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	08 95       	ret

0000158a <LCD_VidShiftCursLeft>:

}

/* Shift Cursor To Left */
void LCD_VidShiftCursLeft(u8 u8CopyNumOfShifts)
{
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	08 2f       	mov	r16, r24
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    1590:	88 23       	and	r24, r24
    1592:	39 f0       	breq	.+14     	; 0x15a2 <LCD_VidShiftCursLeft+0x18>
    1594:	11 e0       	ldi	r17, 0x01	; 1
	{
		LCD_VidSendCmd(0x10);
    1596:	80 e1       	ldi	r24, 0x10	; 16
    1598:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
}

/* Shift Cursor To Left */
void LCD_VidShiftCursLeft(u8 u8CopyNumOfShifts)
{
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    159c:	1f 5f       	subi	r17, 0xFF	; 255
    159e:	01 17       	cp	r16, r17
    15a0:	d0 f7       	brcc	.-12     	; 0x1596 <LCD_VidShiftCursLeft+0xc>
	{
		LCD_VidSendCmd(0x10);
	}
}
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	08 95       	ret

000015a8 <LCD_VidShiftCursRight>:
		}
}

/* Shift Cursor To Right*/
void LCD_VidShiftCursRight(u8 u8CopyNumOfShifts)
{
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	08 2f       	mov	r16, r24
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    15ae:	88 23       	and	r24, r24
    15b0:	39 f0       	breq	.+14     	; 0x15c0 <LCD_VidShiftCursRight+0x18>
    15b2:	11 e0       	ldi	r17, 0x01	; 1
	{
		LCD_VidSendCmd(0x16);
    15b4:	86 e1       	ldi	r24, 0x16	; 22
    15b6:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
}

/* Shift Cursor To Right*/
void LCD_VidShiftCursRight(u8 u8CopyNumOfShifts)
{
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    15ba:	1f 5f       	subi	r17, 0xFF	; 255
    15bc:	01 17       	cp	r16, r17
    15be:	d0 f7       	brcc	.-12     	; 0x15b4 <LCD_VidShiftCursRight+0xc>
	{
		LCD_VidSendCmd(0x16);
	}

}
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <LCD_VidShiftDispLeft>:
	}
}

/* Shift Display To Left */
void LCD_VidShiftDispLeft(u8 u8CopyNumOfShifts)
{
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	08 2f       	mov	r16, r24
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    15cc:	88 23       	and	r24, r24
    15ce:	39 f0       	breq	.+14     	; 0x15de <LCD_VidShiftDispLeft+0x18>
    15d0:	11 e0       	ldi	r17, 0x01	; 1
		{
			LCD_VidSendCmd(0x18);
    15d2:	88 e1       	ldi	r24, 0x18	; 24
    15d4:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
}

/* Shift Display To Left */
void LCD_VidShiftDispLeft(u8 u8CopyNumOfShifts)
{
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    15d8:	1f 5f       	subi	r17, 0xFF	; 255
    15da:	01 17       	cp	r16, r17
    15dc:	d0 f7       	brcc	.-12     	; 0x15d2 <LCD_VidShiftDispLeft+0xc>
		{
			LCD_VidSendCmd(0x18);
		}
}
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <LCD_VidShiftDispRight>:
	}
}

/* Shift Display To Right */
void LCD_VidShiftDispRight(u8 u8CopyNumOfShifts)
{
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	08 2f       	mov	r16, r24
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    15ea:	88 23       	and	r24, r24
    15ec:	39 f0       	breq	.+14     	; 0x15fc <LCD_VidShiftDispRight+0x18>
    15ee:	11 e0       	ldi	r17, 0x01	; 1
	{
		LCD_VidSendCmd(0x1C);
    15f0:	8c e1       	ldi	r24, 0x1C	; 28
    15f2:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
}

/* Shift Display To Right */
void LCD_VidShiftDispRight(u8 u8CopyNumOfShifts)
{
	for(u8 u8LocCounter = 1; u8LocCounter<=u8CopyNumOfShifts; u8LocCounter++)
    15f6:	1f 5f       	subi	r17, 0xFF	; 255
    15f8:	01 17       	cp	r16, r17
    15fa:	d0 f7       	brcc	.-12     	; 0x15f0 <LCD_VidShiftDispRight+0xc>
	{
		LCD_VidSendCmd(0x1C);
	}
}
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	08 95       	ret

00001602 <LCD_VidStoreCustomChar>:
	LCD_VidSendChar(u8CopyCharIndex);
}

/* Store Custom Char CGRAM */
void LCD_VidStoreCustomChar(u8 u8CopyCharIndex, u8* pu8CopyCharPattern)
{
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	8b 01       	movw	r16, r22
	u8 u8LocCGRAM_ADD = u8CopyCharIndex * 8;
	LCD_VidSendCmd(0x40+u8LocCGRAM_ADD);
    160c:	88 0f       	add	r24, r24
    160e:	88 0f       	add	r24, r24
    1610:	88 0f       	add	r24, r24
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    1618:	c0 e0       	ldi	r28, 0x00	; 0
    161a:	d0 e0       	ldi	r29, 0x00	; 0
	for(u8 u8LocCounter = 0; u8LocCounter<8; u8LocCounter++)
	{
		LCD_VidSendChar(pu8CopyCharPattern[u8LocCounter]);
    161c:	f8 01       	movw	r30, r16
    161e:	ec 0f       	add	r30, r28
    1620:	fd 1f       	adc	r31, r29
    1622:	80 81       	ld	r24, Z
    1624:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
    1628:	21 96       	adiw	r28, 0x01	; 1
/* Store Custom Char CGRAM */
void LCD_VidStoreCustomChar(u8 u8CopyCharIndex, u8* pu8CopyCharPattern)
{
	u8 u8LocCGRAM_ADD = u8CopyCharIndex * 8;
	LCD_VidSendCmd(0x40+u8LocCGRAM_ADD);
	for(u8 u8LocCounter = 0; u8LocCounter<8; u8LocCounter++)
    162a:	c8 30       	cpi	r28, 0x08	; 8
    162c:	d1 05       	cpc	r29, r1
    162e:	b1 f7       	brne	.-20     	; 0x161c <LCD_VidStoreCustomChar+0x1a>
	{
		LCD_VidSendChar(pu8CopyCharPattern[u8LocCounter]);
	}
}
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <LCD_VidGoToXY>:
}

/* Move Cursor to Certain Position*/
void LCD_VidGoToXY(s8 s8CopyLine,s8 s8CopyPosition)
{
	switch(s8CopyLine)
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	19 f0       	breq	.+6      	; 0x1644 <LCD_VidGoToXY+0xa>
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	51 f4       	brne	.+20     	; 0x1656 <LCD_VidGoToXY+0x1c>
    1642:	05 c0       	rjmp	.+10     	; 0x164e <LCD_VidGoToXY+0x14>
	{
	case 1:LCD_VidSendCmd(s8CopyPosition+128-1);break;	//position = position + address 0x80
    1644:	86 2f       	mov	r24, r22
    1646:	81 58       	subi	r24, 0x81	; 129
    1648:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    164c:	08 95       	ret
	case 2:LCD_VidSendCmd(s8CopyPosition+192-1);break;	//position = position + address 0xC0		}
    164e:	86 2f       	mov	r24, r22
    1650:	81 54       	subi	r24, 0x41	; 65
    1652:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    1656:	08 95       	ret

00001658 <LCD_VidWriteCustomChar>:
	}
}

/* Write Custom Char Previously Stored In CGRAM */
void LCD_VidWriteCustomChar(u8 u8CopyCharIndex, s8 s8CopyLine, s8 s8CopyPosition)
{
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	18 2f       	mov	r17, r24
    1660:	06 2f       	mov	r16, r22
    1662:	f4 2e       	mov	r15, r20
	LCD_VidSendCmd(0x40+u8CopyCharIndex);
    1664:	80 5c       	subi	r24, 0xC0	; 192
    1666:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
	LCD_VidGoToXY(s8CopyLine,s8CopyPosition);
    166a:	80 2f       	mov	r24, r16
    166c:	6f 2d       	mov	r22, r15
    166e:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_VidGoToXY>
	LCD_VidSendChar(u8CopyCharIndex);
    1672:	81 2f       	mov	r24, r17
    1674:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
}
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	08 95       	ret

00001680 <LCD_VidInit>:
#include "LCD_conf.h"
#include "LCD_priv.h"

/* Initialization of LCD*/
void LCD_VidInit(void)
{
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	80 e6       	ldi	r24, 0x60	; 96
    1686:	9a ee       	ldi	r25, 0xEA	; 234
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCD_VidInit+0x8>

	/*		POWER ON		*/
	_delay_ms(30);

	/* CLR RS PIN */
	DIO_VidSetPinVal(LCD_RS_PORTX,LCD_RS_PINX,DIO_LOW);
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

	/* CLR RW PIN*/
	DIO_VidSetPinVal(LCD_RW_PORTX,LCD_RW_PINX,DIO_LOW);
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

	/* LOAD THE COMMAND */
	DIO_VidSetPinVal(LCD_DATA_PIN4_PORTX,LCD_DATA_PIN4_PINX,0);
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	64 e0       	ldi	r22, 0x04	; 4
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
	DIO_VidSetPinVal(LCD_DATA_PIN5_PORTX,LCD_DATA_PIN5_PINX,1);
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	65 e0       	ldi	r22, 0x05	; 5
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
	DIO_VidSetPinVal(LCD_DATA_PIN6_PORTX,LCD_DATA_PIN6_PINX,0);
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	66 e0       	ldi	r22, 0x06	; 6
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
	DIO_VidSetPinVal(LCD_DATA_PIN7_PORTX,LCD_DATA_PIN7_PINX,0);
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	67 e0       	ldi	r22, 0x07	; 7
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

	/* SET E PIN TO HIGH*/
	DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_HIGH);
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	62 e0       	ldi	r22, 0x02	; 2
    16cc:	4f ef       	ldi	r20, 0xFF	; 255
    16ce:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    16d2:	00 ed       	ldi	r16, 0xD0	; 208
    16d4:	17 e0       	ldi	r17, 0x07	; 7
    16d6:	c8 01       	movw	r24, r16
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_VidInit+0x58>
	_delay_ms(1);
	/* CLR E PIN */
	DIO_VidSetPinVal(LCD_E_PORTX,LCD_E_PINX,DIO_LOW);
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>

	/*		FUNCTION SET	*/
	LCD_VidSendCmd(LCD_FUNCSET_4BIT);
    16e6:	88 e2       	ldi	r24, 0x28	; 40
    16e8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    16ec:	c8 01       	movw	r24, r16
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <LCD_VidInit+0x6e>
	_delay_ms(1);

	/*		DISPLAY ON/OFF	*/
	LCD_VidSendCmd(LCD_DISPON_CURSON);
    16f2:	8e e0       	ldi	r24, 0x0E	; 14
    16f4:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    16f8:	c8 01       	movw	r24, r16
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_VidInit+0x7a>
	_delay_ms(1);

	/*		DISPLAY CLEAR	*/
	LCD_VidSendCmd(LCD_CLR);
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    1704:	80 ea       	ldi	r24, 0xA0	; 160
    1706:	9f e0       	ldi	r25, 0x0F	; 15
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_VidInit+0x88>
	_delay_ms(2);

	/*		ENTRY MODE SET	*/
	LCD_VidSendCmd(LCD_ENTRYMODE);
    170c:	86 e0       	ldi	r24, 0x06	; 6
    170e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    1712:	c8 01       	movw	r24, r16
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <LCD_VidInit+0x94>
	_delay_ms(1);

#endif
}
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <KPD_u8GetPressedKey>:
												{KPD_PUTTON9,KPD_PUTTON10,KPD_PUTTON11,KPD_PUTTON12},
												{KPD_PUTTON13,KPD_PUTTON14,KPD_PUTTON15,KPD_PUTTON16}	};


u8 KPD_u8GetPressedKey()
{
    171e:	8f 92       	push	r8
    1720:	9f 92       	push	r9
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	bb 24       	eor	r11, r11
    1736:	ba 94       	dec	r11
    1738:	ee 24       	eor	r14, r14
    173a:	ff 24       	eor	r15, r15
	u8  u8Col,u8ROW, u8LocSW = NOTPRESSED;

	for(u8Col = KPD_COL1; u8Col <  KPD_COL1+KPD_COL_NUM; u8Col++)
	{
		DIO_VidSetPinVal(KPD_COL_PORTX,u8Col,DIO_PIN_LOW);
    173c:	0f 2e       	mov	r0, r31
    173e:	f0 e8       	ldi	r31, 0x80	; 128
    1740:	8f 2e       	mov	r8, r31
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	9f 2e       	mov	r9, r31
    1746:	f0 2d       	mov	r31, r0
    1748:	0f 2e       	mov	r0, r31
    174a:	f0 e4       	ldi	r31, 0x40	; 64
    174c:	cf 2e       	mov	r12, r31
    174e:	fc e9       	ldi	r31, 0x9C	; 156
    1750:	df 2e       	mov	r13, r31
    1752:	f0 2d       	mov	r31, r0
												{KPD_PUTTON9,KPD_PUTTON10,KPD_PUTTON11,KPD_PUTTON12},
												{KPD_PUTTON13,KPD_PUTTON14,KPD_PUTTON15,KPD_PUTTON16}	};


u8 KPD_u8GetPressedKey()
{
    1754:	0e 2d       	mov	r16, r14
    1756:	0c 5f       	subi	r16, 0xFC	; 252
	u8  u8Col,u8ROW, u8LocSW = NOTPRESSED;

	for(u8Col = KPD_COL1; u8Col <  KPD_COL1+KPD_COL_NUM; u8Col++)
	{
		DIO_VidSetPinVal(KPD_COL_PORTX,u8Col,DIO_PIN_LOW);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	60 2f       	mov	r22, r16
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    1762:	e4 01       	movw	r28, r8
    1764:	ce 0d       	add	r28, r14
    1766:	df 1d       	adc	r29, r15
    1768:	10 e0       	ldi	r17, 0x00	; 0
		for(u8ROW = KPD_ROW1; u8ROW < KPD_ROW1+KPD_ROW_NUM; u8ROW++)
		{
			if( DIO_u8GetPinVal(KPD_ROW_PORTX,u8ROW) == DIO_PIN_LOW )
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	61 2f       	mov	r22, r17
    176e:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_u8GetPinVal>
    1772:	88 23       	and	r24, r24
    1774:	51 f4       	brne	.+20     	; 0x178a <KPD_u8GetPressedKey+0x6c>
			{
				u8LocSW = KPD_au8Array [u8ROW-KPD_ROW1][u8Col-KPD_COL1];
    1776:	b8 80       	ld	r11, Y
				while(DIO_u8GetPinVal(KPD_ROW_PORTX,u8ROW)==DIO_LOW);
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	61 2f       	mov	r22, r17
    177c:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_u8GetPinVal>
    1780:	88 23       	and	r24, r24
    1782:	d1 f3       	breq	.-12     	; 0x1778 <KPD_u8GetPressedKey+0x5a>
    1784:	c6 01       	movw	r24, r12
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <KPD_u8GetPressedKey+0x68>
	u8  u8Col,u8ROW, u8LocSW = NOTPRESSED;

	for(u8Col = KPD_COL1; u8Col <  KPD_COL1+KPD_COL_NUM; u8Col++)
	{
		DIO_VidSetPinVal(KPD_COL_PORTX,u8Col,DIO_PIN_LOW);
		for(u8ROW = KPD_ROW1; u8ROW < KPD_ROW1+KPD_ROW_NUM; u8ROW++)
    178a:	1f 5f       	subi	r17, 0xFF	; 255
    178c:	24 96       	adiw	r28, 0x04	; 4
    178e:	14 30       	cpi	r17, 0x04	; 4
    1790:	61 f7       	brne	.-40     	; 0x176a <KPD_u8GetPressedKey+0x4c>
				u8LocSW = KPD_au8Array [u8ROW-KPD_ROW1][u8Col-KPD_COL1];
				while(DIO_u8GetPinVal(KPD_ROW_PORTX,u8ROW)==DIO_LOW);
				_delay_ms(20);
			}
		}
		DIO_VidSetPinVal(KPD_COL_PORTX,u8Col,DIO_HIGH);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	60 2f       	mov	r22, r16
    1796:	4f ef       	ldi	r20, 0xFF	; 255
    1798:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_VidSetPinVal>
    179c:	08 94       	sec
    179e:	e1 1c       	adc	r14, r1
    17a0:	f1 1c       	adc	r15, r1

u8 KPD_u8GetPressedKey()
{
	u8  u8Col,u8ROW, u8LocSW = NOTPRESSED;

	for(u8Col = KPD_COL1; u8Col <  KPD_COL1+KPD_COL_NUM; u8Col++)
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	e8 16       	cp	r14, r24
    17a6:	f1 04       	cpc	r15, r1
    17a8:	a9 f6       	brne	.-86     	; 0x1754 <KPD_u8GetPressedKey+0x36>
			}
		}
		DIO_VidSetPinVal(KPD_COL_PORTX,u8Col,DIO_HIGH);
	}
	return u8LocSW;
}
    17aa:	8b 2d       	mov	r24, r11
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	9f 90       	pop	r9
    17c0:	8f 90       	pop	r8
    17c2:	08 95       	ret

000017c4 <M_u8_Calculate_Result>:
	}
}


u8 M_u8_Calculate_Result(u8* P_u8_Operators_Arr, f32* P_f32_Operands_Arr, u8 Copy_u8_Operators_Count, f32* P_f32_Result)
{
    17c4:	4f 92       	push	r4
    17c6:	5f 92       	push	r5
    17c8:	6f 92       	push	r6
    17ca:	7f 92       	push	r7
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	6c 01       	movw	r12, r24
    17e6:	eb 01       	movw	r28, r22
    17e8:	64 2e       	mov	r6, r20
    17ea:	29 01       	movw	r4, r18
	u8 Loc_u8_Counter=0,Loc_u8_Counter1=0;
	while(Loc_u8_Counter<Copy_u8_Operators_Count)
    17ec:	44 23       	and	r20, r20
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <M_u8_Calculate_Result+0x2e>
    17f0:	f3 c0       	rjmp	.+486    	; 0x19d8 <M_u8_Calculate_Result+0x214>
    17f2:	77 24       	eor	r7, r7
	{
		//First Calculate Multiply & Division Operators
		if(P_u8_Operators_Arr[Loc_u8_Counter]=='*' || P_u8_Operators_Arr[Loc_u8_Counter]=='/')
    17f4:	e7 2c       	mov	r14, r7
    17f6:	ff 24       	eor	r15, r15
    17f8:	f6 01       	movw	r30, r12
    17fa:	ee 0d       	add	r30, r14
    17fc:	ff 1d       	adc	r31, r15
    17fe:	e0 81       	ld	r30, Z
    1800:	ea 32       	cpi	r30, 0x2A	; 42
    1802:	21 f0       	breq	.+8      	; 0x180c <M_u8_Calculate_Result+0x48>
    1804:	ef 32       	cpi	r30, 0x2F	; 47
    1806:	09 f0       	breq	.+2      	; 0x180a <M_u8_Calculate_Result+0x46>
    1808:	8d c0       	rjmp	.+282    	; 0x1924 <M_u8_Calculate_Result+0x160>
    180a:	22 c0       	rjmp	.+68     	; 0x1850 <M_u8_Calculate_Result+0x8c>
		{
			if(P_u8_Operators_Arr[Loc_u8_Counter]=='*')
			{
				P_f32_Operands_Arr[Loc_u8_Counter]*=P_f32_Operands_Arr[Loc_u8_Counter+1];
    180c:	c7 01       	movw	r24, r14
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	8e 01       	movw	r16, r28
    1818:	08 0f       	add	r16, r24
    181a:	19 1f       	adc	r17, r25
    181c:	c7 01       	movw	r24, r14
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	fe 01       	movw	r30, r28
    182a:	e8 0f       	add	r30, r24
    182c:	f9 1f       	adc	r31, r25
    182e:	d8 01       	movw	r26, r16
    1830:	6d 91       	ld	r22, X+
    1832:	7d 91       	ld	r23, X+
    1834:	8d 91       	ld	r24, X+
    1836:	9c 91       	ld	r25, X
    1838:	20 81       	ld	r18, Z
    183a:	31 81       	ldd	r19, Z+1	; 0x01
    183c:	42 81       	ldd	r20, Z+2	; 0x02
    183e:	53 81       	ldd	r21, Z+3	; 0x03
    1840:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    1844:	f8 01       	movw	r30, r16
    1846:	60 83       	st	Z, r22
    1848:	71 83       	std	Z+1, r23	; 0x01
    184a:	82 83       	std	Z+2, r24	; 0x02
    184c:	93 83       	std	Z+3, r25	; 0x03
    184e:	2f c0       	rjmp	.+94     	; 0x18ae <M_u8_Calculate_Result+0xea>
			}
			else
			{
				//For Division, Check that Denominator not Equal Zero
				if(P_f32_Operands_Arr[Loc_u8_Counter+1]!=0)
    1850:	c7 01       	movw	r24, r14
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	fe 01       	movw	r30, r28
    185e:	e8 0f       	add	r30, r24
    1860:	f9 1f       	adc	r31, r25
    1862:	80 80       	ld	r8, Z
    1864:	91 80       	ldd	r9, Z+1	; 0x01
    1866:	a2 80       	ldd	r10, Z+2	; 0x02
    1868:	b3 80       	ldd	r11, Z+3	; 0x03
    186a:	c5 01       	movw	r24, r10
    186c:	b4 01       	movw	r22, r8
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	0e 94 99 03 	call	0x732	; 0x732 <__nesf2>
    187a:	88 23       	and	r24, r24
    187c:	11 f4       	brne	.+4      	; 0x1882 <M_u8_Calculate_Result+0xbe>
    187e:	8f e0       	ldi	r24, 0x0F	; 15
    1880:	9a c0       	rjmp	.+308    	; 0x19b6 <M_u8_Calculate_Result+0x1f2>
				{
					P_f32_Operands_Arr[Loc_u8_Counter]/=P_f32_Operands_Arr[Loc_u8_Counter+1];
    1882:	c7 01       	movw	r24, r14
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	8e 01       	movw	r16, r28
    188e:	08 0f       	add	r16, r24
    1890:	19 1f       	adc	r17, r25
    1892:	d8 01       	movw	r26, r16
    1894:	6d 91       	ld	r22, X+
    1896:	7d 91       	ld	r23, X+
    1898:	8d 91       	ld	r24, X+
    189a:	9c 91       	ld	r25, X
    189c:	a5 01       	movw	r20, r10
    189e:	94 01       	movw	r18, r8
    18a0:	0e 94 ed 02 	call	0x5da	; 0x5da <__divsf3>
    18a4:	f8 01       	movw	r30, r16
    18a6:	60 83       	st	Z, r22
    18a8:	71 83       	std	Z+1, r23	; 0x01
    18aa:	82 83       	std	Z+2, r24	; 0x02
    18ac:	93 83       	std	Z+3, r25	; 0x03
				{
					return Math_Error;
				}
			}
			//Rearrange Elements in Operands Array & Operators Array
			for(Loc_u8_Counter1=Loc_u8_Counter;Loc_u8_Counter1<Copy_u8_Operators_Count-1;Loc_u8_Counter1++)
    18ae:	86 2d       	mov	r24, r6
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	7c 01       	movw	r14, r24
    18b4:	08 94       	sec
    18b6:	e1 08       	sbc	r14, r1
    18b8:	f1 08       	sbc	r15, r1
    18ba:	87 2d       	mov	r24, r7
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	8e 15       	cp	r24, r14
    18c0:	9f 05       	cpc	r25, r15
    18c2:	74 f5       	brge	.+92     	; 0x1920 <M_u8_Calculate_Result+0x15c>
    18c4:	07 2d       	mov	r16, r7
			{
				P_f32_Operands_Arr[Loc_u8_Counter1+1]=P_f32_Operands_Arr[Loc_u8_Counter1+2];
    18c6:	20 2f       	mov	r18, r16
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	b9 01       	movw	r22, r18
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	cb 01       	movw	r24, r22
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	ae 01       	movw	r20, r28
    18dc:	48 0f       	add	r20, r24
    18de:	59 1f       	adc	r21, r25
    18e0:	c9 01       	movw	r24, r18
    18e2:	02 96       	adiw	r24, 0x02	; 2
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	fe 01       	movw	r30, r28
    18ee:	e8 0f       	add	r30, r24
    18f0:	f9 1f       	adc	r31, r25
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	a2 81       	ldd	r26, Z+2	; 0x02
    18f8:	b3 81       	ldd	r27, Z+3	; 0x03
    18fa:	fa 01       	movw	r30, r20
    18fc:	80 83       	st	Z, r24
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	a2 83       	std	Z+2, r26	; 0x02
    1902:	b3 83       	std	Z+3, r27	; 0x03
				P_u8_Operators_Arr[Loc_u8_Counter1]=P_u8_Operators_Arr[Loc_u8_Counter1+1];
    1904:	d6 01       	movw	r26, r12
    1906:	a2 0f       	add	r26, r18
    1908:	b3 1f       	adc	r27, r19
    190a:	f6 01       	movw	r30, r12
    190c:	e6 0f       	add	r30, r22
    190e:	f7 1f       	adc	r31, r23
    1910:	80 81       	ld	r24, Z
    1912:	8c 93       	st	X, r24
				{
					return Math_Error;
				}
			}
			//Rearrange Elements in Operands Array & Operators Array
			for(Loc_u8_Counter1=Loc_u8_Counter;Loc_u8_Counter1<Copy_u8_Operators_Count-1;Loc_u8_Counter1++)
    1914:	0f 5f       	subi	r16, 0xFF	; 255
    1916:	80 2f       	mov	r24, r16
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	8e 15       	cp	r24, r14
    191c:	9f 05       	cpc	r25, r15
    191e:	9c f2       	brlt	.-90     	; 0x18c6 <M_u8_Calculate_Result+0x102>
			{
				P_f32_Operands_Arr[Loc_u8_Counter1+1]=P_f32_Operands_Arr[Loc_u8_Counter1+2];
				P_u8_Operators_Arr[Loc_u8_Counter1]=P_u8_Operators_Arr[Loc_u8_Counter1+1];
			}
			Copy_u8_Operators_Count--;
    1920:	6a 94       	dec	r6
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <M_u8_Calculate_Result+0x162>
		}
		else
		{
			Loc_u8_Counter++;
    1924:	73 94       	inc	r7


u8 M_u8_Calculate_Result(u8* P_u8_Operators_Arr, f32* P_f32_Operands_Arr, u8 Copy_u8_Operators_Count, f32* P_f32_Result)
{
	u8 Loc_u8_Counter=0,Loc_u8_Counter1=0;
	while(Loc_u8_Counter<Copy_u8_Operators_Count)
    1926:	76 14       	cp	r7, r6
    1928:	08 f4       	brcc	.+2      	; 0x192c <M_u8_Calculate_Result+0x168>
    192a:	64 cf       	rjmp	.-312    	; 0x17f4 <M_u8_Calculate_Result+0x30>
		else
		{
			Loc_u8_Counter++;
		}
	}
	*P_f32_Result=P_f32_Operands_Arr[0];
    192c:	88 81       	ld	r24, Y
    192e:	99 81       	ldd	r25, Y+1	; 0x01
    1930:	aa 81       	ldd	r26, Y+2	; 0x02
    1932:	bb 81       	ldd	r27, Y+3	; 0x03
    1934:	f2 01       	movw	r30, r4
    1936:	80 83       	st	Z, r24
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	a2 83       	std	Z+2, r26	; 0x02
    193c:	b3 83       	std	Z+3, r27	; 0x03
	//Calculate Addition & Subtraction Operators
	for(Loc_u8_Counter=0;Loc_u8_Counter<Copy_u8_Operators_Count;Loc_u8_Counter++)
    193e:	66 20       	and	r6, r6
    1940:	c9 f1       	breq	.+114    	; 0x19b4 <M_u8_Calculate_Result+0x1f0>
    1942:	0c 2d       	mov	r16, r12
    1944:	7e 01       	movw	r14, r28
    1946:	2c 2d       	mov	r18, r12
    1948:	3d 2d       	mov	r19, r13
    194a:	e9 01       	movw	r28, r18
	{
			if(P_u8_Operators_Arr[Loc_u8_Counter]=='+')
    194c:	88 81       	ld	r24, Y
    194e:	8b 32       	cpi	r24, 0x2B	; 43
    1950:	99 f4       	brne	.+38     	; 0x1978 <M_u8_Calculate_Result+0x1b4>
			{
				*P_f32_Result+=P_f32_Operands_Arr[Loc_u8_Counter+1];
    1952:	d2 01       	movw	r26, r4
    1954:	6d 91       	ld	r22, X+
    1956:	7d 91       	ld	r23, X+
    1958:	8d 91       	ld	r24, X+
    195a:	9c 91       	ld	r25, X
    195c:	f7 01       	movw	r30, r14
    195e:	24 81       	ldd	r18, Z+4	; 0x04
    1960:	35 81       	ldd	r19, Z+5	; 0x05
    1962:	46 81       	ldd	r20, Z+6	; 0x06
    1964:	57 81       	ldd	r21, Z+7	; 0x07
    1966:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    196a:	d2 01       	movw	r26, r4
    196c:	6d 93       	st	X+, r22
    196e:	7d 93       	st	X+, r23
    1970:	8d 93       	st	X+, r24
    1972:	9c 93       	st	X, r25
    1974:	13 97       	sbiw	r26, 0x03	; 3
    1976:	15 c0       	rjmp	.+42     	; 0x19a2 <M_u8_Calculate_Result+0x1de>
			}
			else if(P_u8_Operators_Arr[Loc_u8_Counter]=='-')
    1978:	8d 32       	cpi	r24, 0x2D	; 45
    197a:	99 f4       	brne	.+38     	; 0x19a2 <M_u8_Calculate_Result+0x1de>
			{
				*P_f32_Result-=P_f32_Operands_Arr[Loc_u8_Counter+1];
    197c:	f2 01       	movw	r30, r4
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	d7 01       	movw	r26, r14
    1988:	14 96       	adiw	r26, 0x04	; 4
    198a:	2d 91       	ld	r18, X+
    198c:	3d 91       	ld	r19, X+
    198e:	4d 91       	ld	r20, X+
    1990:	5c 91       	ld	r21, X
    1992:	17 97       	sbiw	r26, 0x07	; 7
    1994:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    1998:	f2 01       	movw	r30, r4
    199a:	60 83       	st	Z, r22
    199c:	71 83       	std	Z+1, r23	; 0x01
    199e:	82 83       	std	Z+2, r24	; 0x02
    19a0:	93 83       	std	Z+3, r25	; 0x03
    19a2:	21 96       	adiw	r28, 0x01	; 1
    19a4:	24 e0       	ldi	r18, 0x04	; 4
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	e2 0e       	add	r14, r18
    19aa:	f3 1e       	adc	r15, r19
			Loc_u8_Counter++;
		}
	}
	*P_f32_Result=P_f32_Operands_Arr[0];
	//Calculate Addition & Subtraction Operators
	for(Loc_u8_Counter=0;Loc_u8_Counter<Copy_u8_Operators_Count;Loc_u8_Counter++)
    19ac:	de 01       	movw	r26, r28
    19ae:	a0 1b       	sub	r26, r16
    19b0:	a6 15       	cp	r26, r6
    19b2:	60 f2       	brcs	.-104    	; 0x194c <M_u8_Calculate_Result+0x188>
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
			{
				*P_f32_Result-=P_f32_Operands_Arr[Loc_u8_Counter+1];
			}
	}
	return Correct;
}
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	bf 90       	pop	r11
    19c8:	af 90       	pop	r10
    19ca:	9f 90       	pop	r9
    19cc:	8f 90       	pop	r8
    19ce:	7f 90       	pop	r7
    19d0:	6f 90       	pop	r6
    19d2:	5f 90       	pop	r5
    19d4:	4f 90       	pop	r4
    19d6:	08 95       	ret
		else
		{
			Loc_u8_Counter++;
		}
	}
	*P_f32_Result=P_f32_Operands_Arr[0];
    19d8:	88 81       	ld	r24, Y
    19da:	99 81       	ldd	r25, Y+1	; 0x01
    19dc:	aa 81       	ldd	r26, Y+2	; 0x02
    19de:	bb 81       	ldd	r27, Y+3	; 0x03
    19e0:	f9 01       	movw	r30, r18
    19e2:	80 83       	st	Z, r24
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	a2 83       	std	Z+2, r26	; 0x02
    19e8:	b3 83       	std	Z+3, r27	; 0x03
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	e4 cf       	rjmp	.-56     	; 0x19b6 <M_u8_Calculate_Result+0x1f2>

000019ee <M_u8_Create_KPD_Arr>:
#include "Calculator_Func.h"

extern u8 G_u8_KPD_Pressed[50];

u8 M_u8_Create_KPD_Arr(u8 Copy_u8_Counter,f32* P_f32_Result)
{
    19ee:	2f 92       	push	r2
    19f0:	3f 92       	push	r3
    19f2:	4f 92       	push	r4
    19f4:	5f 92       	push	r5
    19f6:	6f 92       	push	r6
    19f8:	7f 92       	push	r7
    19fa:	8f 92       	push	r8
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	cd 59       	subi	r28, 0x9D	; 157
    1a18:	d0 40       	sbci	r29, 0x00	; 0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	a8 2e       	mov	r10, r24
    1a26:	c8 56       	subi	r28, 0x68	; 104
    1a28:	df 4f       	sbci	r29, 0xFF	; 255
    1a2a:	79 83       	std	Y+1, r23	; 0x01
    1a2c:	68 83       	st	Y, r22
    1a2e:	c8 59       	subi	r28, 0x98	; 152
    1a30:	d0 40       	sbci	r29, 0x00	; 0
	*P_f32_Result=0;								//Set Result by Zero
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	fb 01       	movw	r30, r22
    1a3c:	80 83       	st	Z, r24
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	a2 83       	std	Z+2, r26	; 0x02
    1a42:	b3 83       	std	Z+3, r27	; 0x03
	u8 Loc_u8_Counter=0,Loc_u8_Result=0;
	u8 Loc_u8_Operands_Count=0,Loc_u8_Operators_Count=0,Loc_u8_Negative_Flag=0;
	u8 Loc_u8_Operators_Arr[30]={0};				//Create Array to Store Operates
    1a44:	fe 01       	movw	r30, r28
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	8e e1       	ldi	r24, 0x1E	; 30
    1a4a:	df 01       	movw	r26, r30
    1a4c:	1d 92       	st	X+, r1
    1a4e:	8a 95       	dec	r24
    1a50:	e9 f7       	brne	.-6      	; 0x1a4c <M_u8_Create_KPD_Arr+0x5e>
	f32 Loc_f32_Operands_Arr[30]={0};				//Create Array To Store Operands
    1a52:	fe 01       	movw	r30, r28
    1a54:	7f 96       	adiw	r30, 0x1f	; 31
    1a56:	88 e7       	ldi	r24, 0x78	; 120
    1a58:	df 01       	movw	r26, r30
    1a5a:	1d 92       	st	X+, r1
    1a5c:	8a 95       	dec	r24
    1a5e:	e9 f7       	brne	.-6      	; 0x1a5a <M_u8_Create_KPD_Arr+0x6c>
	LCD_VidSendCmd(LCD_CLR);						//Clear LCD
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>

	while(Loc_u8_Counter<Copy_u8_Counter)			//Copy_u8_Counter Stores Num of KPD Pressed
    1a66:	aa 20       	and	r10, r10
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <M_u8_Create_KPD_Arr+0x7e>
    1a6a:	ef c0       	rjmp	.+478    	; 0x1c4a <M_u8_Create_KPD_Arr+0x25c>
    1a6c:	10 e0       	ldi	r17, 0x00	; 0
    1a6e:	33 24       	eor	r3, r3
    1a70:	c9 56       	subi	r28, 0x69	; 105
    1a72:	df 4f       	sbci	r29, 0xFF	; 255
    1a74:	18 82       	st	Y, r1
    1a76:	c7 59       	subi	r28, 0x97	; 151
    1a78:	d0 40       	sbci	r29, 0x00	; 0
    1a7a:	22 24       	eor	r2, r2
	{
		//Check if the Char is a Number or Operator
		if((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9'))
    1a7c:	0f 2e       	mov	r0, r31
    1a7e:	f0 e9       	ldi	r31, 0x90	; 144
    1a80:	6f 2e       	mov	r6, r31
    1a82:	f1 e0       	ldi	r31, 0x01	; 1
    1a84:	7f 2e       	mov	r7, r31
    1a86:	f0 2d       	mov	r31, r0
    1a88:	21 2f       	mov	r18, r17
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	f3 01       	movw	r30, r6
    1a8e:	e2 0f       	add	r30, r18
    1a90:	f3 1f       	adc	r31, r19
    1a92:	b0 80       	ld	r11, Z
    1a94:	8b 2d       	mov	r24, r11
    1a96:	80 53       	subi	r24, 0x30	; 48
    1a98:	8a 30       	cpi	r24, 0x0A	; 10
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <M_u8_Create_KPD_Arr+0xb0>
    1a9c:	f1 c0       	rjmp	.+482    	; 0x1c80 <M_u8_Create_KPD_Arr+0x292>
    1a9e:	6a c0       	rjmp	.+212    	; 0x1b74 <M_u8_Create_KPD_Arr+0x186>
		{
			//while the Next Char is a Number -> Create one Integer Number from Digits
			while(((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9')) && (Loc_u8_Counter<Copy_u8_Counter))
			{
				//Store The Number in Operands Array
				Loc_f32_Operands_Arr[Loc_u8_Operands_Count]=Loc_f32_Operands_Arr[Loc_u8_Operands_Count]*10+(G_u8_KPD_Pressed[Loc_u8_Counter]-'0');
    1aa0:	f6 01       	movw	r30, r12
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    1ab6:	c6 56       	subi	r28, 0x66	; 102
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	68 83       	st	Y, r22
    1abc:	79 83       	std	Y+1, r23	; 0x01
    1abe:	8a 83       	std	Y+2, r24	; 0x02
    1ac0:	9b 83       	std	Y+3, r25	; 0x03
    1ac2:	ca 59       	subi	r28, 0x9A	; 154
    1ac4:	d0 40       	sbci	r29, 0x00	; 0
    1ac6:	60 2f       	mov	r22, r16
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	60 53       	subi	r22, 0x30	; 48
    1acc:	70 40       	sbci	r23, 0x00	; 0
    1ace:	88 27       	eor	r24, r24
    1ad0:	77 fd       	sbrc	r23, 7
    1ad2:	80 95       	com	r24
    1ad4:	98 2f       	mov	r25, r24
    1ad6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__floatsisf>
    1ada:	9b 01       	movw	r18, r22
    1adc:	ac 01       	movw	r20, r24
    1ade:	c6 56       	subi	r28, 0x66	; 102
    1ae0:	df 4f       	sbci	r29, 0xFF	; 255
    1ae2:	68 81       	ld	r22, Y
    1ae4:	79 81       	ldd	r23, Y+1	; 0x01
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	ca 59       	subi	r28, 0x9A	; 154
    1aec:	d0 40       	sbci	r29, 0x00	; 0
    1aee:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1af2:	d6 01       	movw	r26, r12
    1af4:	6d 93       	st	X+, r22
    1af6:	7d 93       	st	X+, r23
    1af8:	8d 93       	st	X+, r24
    1afa:	9c 93       	st	X, r25
    1afc:	13 97       	sbiw	r26, 0x03	; 3
				Loc_u8_Counter++;
    1afe:	1f 5f       	subi	r17, 0xFF	; 255
	{
		//Check if the Char is a Number or Operator
		if((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9'))
		{
			//while the Next Char is a Number -> Create one Integer Number from Digits
			while(((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9')) && (Loc_u8_Counter<Copy_u8_Counter))
    1b00:	f3 01       	movw	r30, r6
    1b02:	e1 0f       	add	r30, r17
    1b04:	f1 1d       	adc	r31, r1
    1b06:	00 81       	ld	r16, Z
    1b08:	80 2f       	mov	r24, r16
    1b0a:	80 53       	subi	r24, 0x30	; 48
    1b0c:	8a 30       	cpi	r24, 0x0A	; 10
    1b0e:	98 f0       	brcs	.+38     	; 0x1b36 <M_u8_Create_KPD_Arr+0x148>
    1b10:	15 c0       	rjmp	.+42     	; 0x1b3c <M_u8_Create_KPD_Arr+0x14e>
			{
				//Store The Number in Operands Array
				Loc_f32_Operands_Arr[Loc_u8_Operands_Count]=Loc_f32_Operands_Arr[Loc_u8_Operands_Count]*10+(G_u8_KPD_Pressed[Loc_u8_Counter]-'0');
    1b12:	c2 01       	movw	r24, r4
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	e1 e0       	ldi	r30, 0x01	; 1
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	ec 0f       	add	r30, r28
    1b22:	fd 1f       	adc	r31, r29
    1b24:	8e 0f       	add	r24, r30
    1b26:	9f 1f       	adc	r25, r31
    1b28:	0f 2e       	mov	r0, r31
    1b2a:	fe e1       	ldi	r31, 0x1E	; 30
    1b2c:	cf 2e       	mov	r12, r31
    1b2e:	dd 24       	eor	r13, r13
    1b30:	f0 2d       	mov	r31, r0
    1b32:	c8 0e       	add	r12, r24
    1b34:	d9 1e       	adc	r13, r25
	{
		//Check if the Char is a Number or Operator
		if((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9'))
		{
			//while the Next Char is a Number -> Create one Integer Number from Digits
			while(((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9')) && (Loc_u8_Counter<Copy_u8_Counter))
    1b36:	1a 15       	cp	r17, r10
    1b38:	08 f4       	brcc	.+2      	; 0x1b3c <M_u8_Create_KPD_Arr+0x14e>
    1b3a:	b2 cf       	rjmp	.-156    	; 0x1aa0 <M_u8_Create_KPD_Arr+0xb2>
				//Store The Number in Operands Array
				Loc_f32_Operands_Arr[Loc_u8_Operands_Count]=Loc_f32_Operands_Arr[Loc_u8_Operands_Count]*10+(G_u8_KPD_Pressed[Loc_u8_Counter]-'0');
				Loc_u8_Counter++;
			}
			//If Negative Flag = 1 -> Multiply Number by -1
			if(Loc_u8_Negative_Flag==1)
    1b3c:	f1 e0       	ldi	r31, 0x01	; 1
    1b3e:	2f 16       	cp	r2, r31
    1b40:	b9 f4       	brne	.+46     	; 0x1b70 <M_u8_Create_KPD_Arr+0x182>
			{
				Loc_f32_Operands_Arr[Loc_u8_Operands_Count]*=-1;
    1b42:	83 2d       	mov	r24, r3
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	e1 e0       	ldi	r30, 0x01	; 1
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	ec 0f       	add	r30, r28
    1b54:	fd 1f       	adc	r31, r29
    1b56:	e8 0f       	add	r30, r24
    1b58:	f9 1f       	adc	r31, r25
    1b5a:	7e 96       	adiw	r30, 0x1e	; 30
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	a2 81       	ldd	r26, Z+2	; 0x02
    1b62:	b3 81       	ldd	r27, Z+3	; 0x03
    1b64:	b0 58       	subi	r27, 0x80	; 128
    1b66:	80 83       	st	Z, r24
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
    1b6e:	22 24       	eor	r2, r2
				Loc_u8_Negative_Flag=0;				//Clear Flag
			}
			Loc_u8_Operands_Count++;				//Increase Counter by 1
    1b70:	33 94       	inc	r3
    1b72:	47 c0       	rjmp	.+142    	; 0x1c02 <M_u8_Create_KPD_Arr+0x214>
		}
		else
		{
			if(Loc_u8_Counter==0)		//Check if it is the First Element in The Array or not
    1b74:	11 23       	and	r17, r17
    1b76:	e9 f4       	brne	.+58     	; 0x1bb2 <M_u8_Create_KPD_Arr+0x1c4>
			{
				//Check if the First Element = '+' & Next Element is a Number
				if(G_u8_KPD_Pressed[Loc_u8_Counter]=='+')
    1b78:	8b e2       	ldi	r24, 0x2B	; 43
    1b7a:	b8 16       	cp	r11, r24
    1b7c:	51 f4       	brne	.+20     	; 0x1b92 <M_u8_Create_KPD_Arr+0x1a4>
				{
					if((G_u8_KPD_Pressed[Loc_u8_Counter+1]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter+1]<='9'))
    1b7e:	f3 01       	movw	r30, r6
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	81 81       	ldd	r24, Z+1	; 0x01
    1b86:	80 53       	subi	r24, 0x30	; 48
    1b88:	8a 30       	cpi	r24, 0x0A	; 10
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <M_u8_Create_KPD_Arr+0x1a0>
    1b8c:	5e c0       	rjmp	.+188    	; 0x1c4a <M_u8_Create_KPD_Arr+0x25c>
    1b8e:	11 e0       	ldi	r17, 0x01	; 1
    1b90:	38 c0       	rjmp	.+112    	; 0x1c02 <M_u8_Create_KPD_Arr+0x214>
					{
						return Syntax_Error;
					}
				}
				//Check if the First Element = '-' & Next Element is a Number
				else if(G_u8_KPD_Pressed[Loc_u8_Counter]=='-')
    1b92:	ad e2       	ldi	r26, 0x2D	; 45
    1b94:	ba 16       	cp	r11, r26
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <M_u8_Create_KPD_Arr+0x1ac>
    1b98:	58 c0       	rjmp	.+176    	; 0x1c4a <M_u8_Create_KPD_Arr+0x25c>
				{
					if((G_u8_KPD_Pressed[Loc_u8_Counter+1]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter+1]<='9'))
    1b9a:	f3 01       	movw	r30, r6
    1b9c:	e2 0f       	add	r30, r18
    1b9e:	f3 1f       	adc	r31, r19
    1ba0:	81 81       	ldd	r24, Z+1	; 0x01
    1ba2:	80 53       	subi	r24, 0x30	; 48
    1ba4:	8a 30       	cpi	r24, 0x0A	; 10
    1ba6:	08 f0       	brcs	.+2      	; 0x1baa <M_u8_Create_KPD_Arr+0x1bc>
    1ba8:	50 c0       	rjmp	.+160    	; 0x1c4a <M_u8_Create_KPD_Arr+0x25c>
    1baa:	11 e0       	ldi	r17, 0x01	; 1
    1bac:	22 24       	eor	r2, r2
    1bae:	23 94       	inc	r2
    1bb0:	28 c0       	rjmp	.+80     	; 0x1c02 <M_u8_Create_KPD_Arr+0x214>
				}
			}
			else
			{
				//Store The Operator in Operators Array
				Loc_u8_Operators_Arr[Loc_u8_Operators_Count]=G_u8_KPD_Pressed[Loc_u8_Counter];
    1bb2:	e1 e0       	ldi	r30, 0x01	; 1
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	ec 0f       	add	r30, r28
    1bb8:	fd 1f       	adc	r31, r29
    1bba:	c9 56       	subi	r28, 0x69	; 105
    1bbc:	df 4f       	sbci	r29, 0xFF	; 255
    1bbe:	b8 81       	ld	r27, Y
    1bc0:	c7 59       	subi	r28, 0x97	; 151
    1bc2:	d0 40       	sbci	r29, 0x00	; 0
    1bc4:	eb 0f       	add	r30, r27
    1bc6:	f1 1d       	adc	r31, r1
    1bc8:	b0 82       	st	Z, r11
				Loc_u8_Operators_Count++;
    1bca:	bf 5f       	subi	r27, 0xFF	; 255
    1bcc:	c9 56       	subi	r28, 0x69	; 105
    1bce:	df 4f       	sbci	r29, 0xFF	; 255
    1bd0:	b8 83       	st	Y, r27
    1bd2:	c7 59       	subi	r28, 0x97	; 151
    1bd4:	d0 40       	sbci	r29, 0x00	; 0
				//Check if The Next Element is a Number
				if((G_u8_KPD_Pressed[Loc_u8_Counter+1]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter+1]<='9'))
    1bd6:	f3 01       	movw	r30, r6
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	89 2f       	mov	r24, r25
    1be0:	80 53       	subi	r24, 0x30	; 48
    1be2:	8a 30       	cpi	r24, 0x0A	; 10
    1be4:	10 f4       	brcc	.+4      	; 0x1bea <M_u8_Create_KPD_Arr+0x1fc>
				{
					Loc_u8_Counter++;
    1be6:	1f 5f       	subi	r17, 0xFF	; 255
    1be8:	0c c0       	rjmp	.+24     	; 0x1c02 <M_u8_Create_KPD_Arr+0x214>
				}
				//Check if the Next Element is a Negative Number
				else if((G_u8_KPD_Pressed[Loc_u8_Counter+1]=='-') && ((G_u8_KPD_Pressed[Loc_u8_Counter+2]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter+2]<='9')))
    1bea:	9d 32       	cpi	r25, 0x2D	; 45
    1bec:	71 f5       	brne	.+92     	; 0x1c4a <M_u8_Create_KPD_Arr+0x25c>
    1bee:	f3 01       	movw	r30, r6
    1bf0:	e2 0f       	add	r30, r18
    1bf2:	f3 1f       	adc	r31, r19
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	80 53       	subi	r24, 0x30	; 48
    1bf8:	8a 30       	cpi	r24, 0x0A	; 10
    1bfa:	38 f5       	brcc	.+78     	; 0x1c4a <M_u8_Create_KPD_Arr+0x25c>
				{
					Loc_u8_Negative_Flag=1;		//Set Negative Flag
					Loc_u8_Counter+=2;
    1bfc:	1e 5f       	subi	r17, 0xFE	; 254
    1bfe:	22 24       	eor	r2, r2
    1c00:	23 94       	inc	r2
	u8 Loc_u8_Operands_Count=0,Loc_u8_Operators_Count=0,Loc_u8_Negative_Flag=0;
	u8 Loc_u8_Operators_Arr[30]={0};				//Create Array to Store Operates
	f32 Loc_f32_Operands_Arr[30]={0};				//Create Array To Store Operands
	LCD_VidSendCmd(LCD_CLR);						//Clear LCD

	while(Loc_u8_Counter<Copy_u8_Counter)			//Copy_u8_Counter Stores Num of KPD Pressed
    1c02:	1a 15       	cp	r17, r10
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <M_u8_Create_KPD_Arr+0x21a>
    1c06:	40 cf       	rjmp	.-384    	; 0x1a88 <M_u8_Create_KPD_Arr+0x9a>
			}
		}
	}

	//Check if Operands == Operators +1
	if((Loc_u8_Operators_Count+1)==Loc_u8_Operands_Count)
    1c08:	c9 56       	subi	r28, 0x69	; 105
    1c0a:	df 4f       	sbci	r29, 0xFF	; 255
    1c0c:	e8 81       	ld	r30, Y
    1c0e:	c7 59       	subi	r28, 0x97	; 151
    1c10:	d0 40       	sbci	r29, 0x00	; 0
    1c12:	8e 2f       	mov	r24, r30
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	23 2d       	mov	r18, r3
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	82 17       	cp	r24, r18
    1c1e:	93 07       	cpc	r25, r19
    1c20:	a1 f4       	brne	.+40     	; 0x1c4a <M_u8_Create_KPD_Arr+0x25c>
	{
		//Call Func to Calculate the Result
		Loc_u8_Result = M_u8_Calculate_Result(Loc_u8_Operators_Arr, Loc_f32_Operands_Arr, Loc_u8_Operators_Count, P_f32_Result);
    1c22:	ce 01       	movw	r24, r28
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	be 01       	movw	r22, r28
    1c28:	61 5e       	subi	r22, 0xE1	; 225
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	4e 2f       	mov	r20, r30
    1c2e:	c8 56       	subi	r28, 0x68	; 104
    1c30:	df 4f       	sbci	r29, 0xFF	; 255
    1c32:	28 81       	ld	r18, Y
    1c34:	39 81       	ldd	r19, Y+1	; 0x01
    1c36:	c8 59       	subi	r28, 0x98	; 152
    1c38:	d0 40       	sbci	r29, 0x00	; 0
    1c3a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <M_u8_Calculate_Result>
		if(Loc_u8_Result==Math_Error)
    1c3e:	8f 30       	cpi	r24, 0x0F	; 15
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <M_u8_Create_KPD_Arr+0x258>
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	03 c0       	rjmp	.+6      	; 0x1c4c <M_u8_Create_KPD_Arr+0x25e>
    1c46:	8f e0       	ldi	r24, 0x0F	; 15
    1c48:	01 c0       	rjmp	.+2      	; 0x1c4c <M_u8_Create_KPD_Arr+0x25e>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return Syntax_Error;
	}
}
    1c4c:	c3 56       	subi	r28, 0x63	; 99
    1c4e:	df 4f       	sbci	r29, 0xFF	; 255
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	5f 90       	pop	r5
    1c78:	4f 90       	pop	r4
    1c7a:	3f 90       	pop	r3
    1c7c:	2f 90       	pop	r2
    1c7e:	08 95       	ret
	{
		//Check if the Char is a Number or Operator
		if((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9'))
		{
			//while the Next Char is a Number -> Create one Integer Number from Digits
			while(((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9')) && (Loc_u8_Counter<Copy_u8_Counter))
    1c80:	1a 15       	cp	r17, r10
    1c82:	08 f0       	brcs	.+2      	; 0x1c86 <M_u8_Create_KPD_Arr+0x298>
    1c84:	5b cf       	rjmp	.-330    	; 0x1b3c <M_u8_Create_KPD_Arr+0x14e>
			{
				//Store The Number in Operands Array
				Loc_f32_Operands_Arr[Loc_u8_Operands_Count]=Loc_f32_Operands_Arr[Loc_u8_Operands_Count]*10+(G_u8_KPD_Pressed[Loc_u8_Counter]-'0');
    1c86:	43 2c       	mov	r4, r3
    1c88:	55 24       	eor	r5, r5
    1c8a:	c2 01       	movw	r24, r4
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	21 e0       	ldi	r18, 0x01	; 1
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	2c 0f       	add	r18, r28
    1c9a:	3d 1f       	adc	r19, r29
    1c9c:	82 0f       	add	r24, r18
    1c9e:	93 1f       	adc	r25, r19
    1ca0:	0f 2e       	mov	r0, r31
    1ca2:	fe e1       	ldi	r31, 0x1E	; 30
    1ca4:	8f 2e       	mov	r8, r31
    1ca6:	99 24       	eor	r9, r9
    1ca8:	f0 2d       	mov	r31, r0
    1caa:	88 0e       	add	r8, r24
    1cac:	99 1e       	adc	r9, r25
    1cae:	d4 01       	movw	r26, r8
    1cb0:	6d 91       	ld	r22, X+
    1cb2:	7d 91       	ld	r23, X+
    1cb4:	8d 91       	ld	r24, X+
    1cb6:	9c 91       	ld	r25, X
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e2       	ldi	r20, 0x20	; 32
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    1cc4:	6b 01       	movw	r12, r22
    1cc6:	7c 01       	movw	r14, r24
    1cc8:	6b 2d       	mov	r22, r11
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	60 53       	subi	r22, 0x30	; 48
    1cce:	70 40       	sbci	r23, 0x00	; 0
    1cd0:	88 27       	eor	r24, r24
    1cd2:	77 fd       	sbrc	r23, 7
    1cd4:	80 95       	com	r24
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__floatsisf>
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	0e 94 c6 01 	call	0x38c	; 0x38c <__addsf3>
    1ce8:	f4 01       	movw	r30, r8
    1cea:	60 83       	st	Z, r22
    1cec:	71 83       	std	Z+1, r23	; 0x01
    1cee:	82 83       	std	Z+2, r24	; 0x02
    1cf0:	93 83       	std	Z+3, r25	; 0x03
				Loc_u8_Counter++;
    1cf2:	1f 5f       	subi	r17, 0xFF	; 255
	{
		//Check if the Char is a Number or Operator
		if((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9'))
		{
			//while the Next Char is a Number -> Create one Integer Number from Digits
			while(((G_u8_KPD_Pressed[Loc_u8_Counter]>='0') && (G_u8_KPD_Pressed[Loc_u8_Counter]<='9')) && (Loc_u8_Counter<Copy_u8_Counter))
    1cf4:	f3 01       	movw	r30, r6
    1cf6:	e1 0f       	add	r30, r17
    1cf8:	f1 1d       	adc	r31, r1
    1cfa:	00 81       	ld	r16, Z
    1cfc:	80 2f       	mov	r24, r16
    1cfe:	80 53       	subi	r24, 0x30	; 48
    1d00:	8a 30       	cpi	r24, 0x0A	; 10
    1d02:	08 f4       	brcc	.+2      	; 0x1d06 <M_u8_Create_KPD_Arr+0x318>
    1d04:	06 cf       	rjmp	.-500    	; 0x1b12 <M_u8_Create_KPD_Arr+0x124>
    1d06:	1a cf       	rjmp	.-460    	; 0x1b3c <M_u8_Create_KPD_Arr+0x14e>

00001d08 <main>:
#include "Calculator_Func.h"

u8 G_u8_KPD_Pressed[50];								//Global Array to store Keypad Buttons Pressed

int main()
{
    1d08:	6f 92       	push	r6
    1d0a:	7f 92       	push	r7
    1d0c:	8f 92       	push	r8
    1d0e:	9f 92       	push	r9
    1d10:	af 92       	push	r10
    1d12:	bf 92       	push	r11
    1d14:	df 92       	push	r13
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <main+0x1c>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <main+0x1e>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	DIO_VidInit();										//Initialize Digital Input/Output Ports
    1d2a:	0e 94 a0 06 	call	0xd40	; 0xd40 <DIO_VidInit>
	LCD_VidInit();										//Initialize LCD
    1d2e:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_VidInit>
	u8 Loc_u8_Key_Pressed,Loc_u8_Counter=0;
	u8 Loc_u8_Status=Syntax_Error;						// Initial Value of Status is Syntax Error
	f32 Loc_f32_Result=0;
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a0 e0       	ldi	r26, 0x00	; 0
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	ab 83       	std	Y+3, r26	; 0x03
    1d40:	bc 83       	std	Y+4, r27	; 0x04
    1d42:	00 e0       	ldi	r16, 0x00	; 0
				else if(Loc_u8_Counter>=16)						//If The Counter >= 16, Shift Display Left to Show Content on LCD
				{
					LCD_VidShiftDispLeft(1);
				}
				LCD_VidSendChar(Loc_u8_Key_Pressed);			//Print Char on LCD
				G_u8_KPD_Pressed[Loc_u8_Counter]=Loc_u8_Key_Pressed;	//Store Pressed Key in The KeyPad Array
    1d44:	0f 2e       	mov	r0, r31
    1d46:	f0 e9       	ldi	r31, 0x90	; 144
    1d48:	ef 2e       	mov	r14, r31
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	ff 2e       	mov	r15, r31
    1d4e:	f0 2d       	mov	r31, r0
				}
			}
			else if(Loc_u8_Key_Pressed==' ')					//If The Key Pressed is ' ', Clear All
			{
				Loc_u8_Counter = 0;
				LCD_VidSendCmd(LCD_CLR);						//Clear LCD
    1d50:	dd 24       	eor	r13, r13
		{
			if(Loc_u8_Key_Pressed=='=')					//If The Key Pressed is '=', Check The Expression
			{
				if(Loc_u8_Counter!=0)
				{
					Loc_u8_Status = M_u8_Create_KPD_Arr(Loc_u8_Counter,&Loc_f32_Result);
    1d52:	5e 01       	movw	r10, r28
    1d54:	08 94       	sec
    1d56:	a1 1c       	adc	r10, r1
    1d58:	b1 1c       	adc	r11, r1
					{
						LCD_VidSendStr((u8*)"Syntax_Error");	//Print Syntax_Error on LCD
					}
					else if(Loc_u8_Status == Math_Error)
					{
						LCD_VidSendStr((u8*)"Math_Error");		//Print Math_Error on LCD
    1d5a:	0f 2e       	mov	r0, r31
    1d5c:	fd e6       	ldi	r31, 0x6D	; 109
    1d5e:	8f 2e       	mov	r8, r31
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	9f 2e       	mov	r9, r31
    1d64:	f0 2d       	mov	r31, r0
					Loc_u8_Status = M_u8_Create_KPD_Arr(Loc_u8_Counter,&Loc_f32_Result);
					//Call Function that Create Two Arrays, one for Operands and the other for Operators
					Loc_u8_Counter = 0;
					if(Loc_u8_Status==Syntax_Error)
					{
						LCD_VidSendStr((u8*)"Syntax_Error");	//Print Syntax_Error on LCD
    1d66:	0f 2e       	mov	r0, r31
    1d68:	f0 e6       	ldi	r31, 0x60	; 96
    1d6a:	6f 2e       	mov	r6, r31
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	7f 2e       	mov	r7, r31
    1d70:	f0 2d       	mov	r31, r0
    1d72:	01 c0       	rjmp	.+2      	; 0x1d76 <main+0x6e>
{
	DIO_VidInit();										//Initialize Digital Input/Output Ports
	LCD_VidInit();										//Initialize LCD
	u8 Loc_u8_Key_Pressed,Loc_u8_Counter=0;
	u8 Loc_u8_Status=Syntax_Error;						// Initial Value of Status is Syntax Error
	f32 Loc_f32_Result=0;
    1d74:	0d 2d       	mov	r16, r13
	while(1)
	{
		Loc_u8_Key_Pressed = KPD_u8GetPressedKey();		//Get Pressed Key
    1d76:	0e 94 8f 0b 	call	0x171e	; 0x171e <KPD_u8GetPressedKey>
    1d7a:	18 2f       	mov	r17, r24
		if(Loc_u8_Key_Pressed != NOTPRESSED)
    1d7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d7e:	d9 f3       	breq	.-10     	; 0x1d76 <main+0x6e>
		{
			if(Loc_u8_Key_Pressed=='=')					//If The Key Pressed is '=', Check The Expression
    1d80:	8d 33       	cpi	r24, 0x3D	; 61
    1d82:	f1 f4       	brne	.+60     	; 0x1dc0 <main+0xb8>
			{
				if(Loc_u8_Counter!=0)
    1d84:	00 23       	and	r16, r16
    1d86:	b9 f3       	breq	.-18     	; 0x1d76 <main+0x6e>
				{
					Loc_u8_Status = M_u8_Create_KPD_Arr(Loc_u8_Counter,&Loc_f32_Result);
    1d88:	80 2f       	mov	r24, r16
    1d8a:	b5 01       	movw	r22, r10
    1d8c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <M_u8_Create_KPD_Arr>
					//Call Function that Create Two Arrays, one for Operands and the other for Operators
					Loc_u8_Counter = 0;
					if(Loc_u8_Status==Syntax_Error)
    1d90:	88 23       	and	r24, r24
    1d92:	29 f4       	brne	.+10     	; 0x1d9e <main+0x96>
					{
						LCD_VidSendStr((u8*)"Syntax_Error");	//Print Syntax_Error on LCD
    1d94:	c3 01       	movw	r24, r6
    1d96:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_VidSendStr>
    1d9a:	0d 2d       	mov	r16, r13
    1d9c:	ec cf       	rjmp	.-40     	; 0x1d76 <main+0x6e>
					}
					else if(Loc_u8_Status == Math_Error)
    1d9e:	8f 30       	cpi	r24, 0x0F	; 15
    1da0:	29 f4       	brne	.+10     	; 0x1dac <main+0xa4>
					{
						LCD_VidSendStr((u8*)"Math_Error");		//Print Math_Error on LCD
    1da2:	c4 01       	movw	r24, r8
    1da4:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_VidSendStr>
    1da8:	0d 2d       	mov	r16, r13
    1daa:	e5 cf       	rjmp	.-54     	; 0x1d76 <main+0x6e>
					}
					else if(Loc_u8_Status == Correct)
    1dac:	8f 3f       	cpi	r24, 0xFF	; 255
    1dae:	11 f7       	brne	.-60     	; 0x1d74 <main+0x6c>
					{
						LCD_VidWriteFloatNum(Loc_f32_Result);	//Print Result Value on LCD
    1db0:	69 81       	ldd	r22, Y+1	; 0x01
    1db2:	7a 81       	ldd	r23, Y+2	; 0x02
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_VidWriteFloatNum>
    1dbc:	0d 2d       	mov	r16, r13
    1dbe:	db cf       	rjmp	.-74     	; 0x1d76 <main+0x6e>
					}
				}
			}
			else if(Loc_u8_Key_Pressed==' ')					//If The Key Pressed is ' ', Clear All
    1dc0:	80 32       	cpi	r24, 0x20	; 32
    1dc2:	29 f4       	brne	.+10     	; 0x1dce <main+0xc6>
			{
				Loc_u8_Counter = 0;
				LCD_VidSendCmd(LCD_CLR);						//Clear LCD
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    1dca:	0d 2d       	mov	r16, r13
    1dcc:	d4 cf       	rjmp	.-88     	; 0x1d76 <main+0x6e>
			}
			else
			{
				if(Loc_u8_Counter==0)							//If The Counter = 0, Clear All
    1dce:	00 23       	and	r16, r16
    1dd0:	21 f4       	brne	.+8      	; 0x1dda <main+0xd2>
				{
					LCD_VidSendCmd(LCD_CLR);
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_VidSendCmd>
    1dd8:	05 c0       	rjmp	.+10     	; 0x1de4 <main+0xdc>
				}
				else if(Loc_u8_Counter>=16)						//If The Counter >= 16, Shift Display Left to Show Content on LCD
    1dda:	00 31       	cpi	r16, 0x10	; 16
    1ddc:	18 f0       	brcs	.+6      	; 0x1de4 <main+0xdc>
				{
					LCD_VidShiftDispLeft(1);
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <LCD_VidShiftDispLeft>
				}
				LCD_VidSendChar(Loc_u8_Key_Pressed);			//Print Char on LCD
    1de4:	81 2f       	mov	r24, r17
    1de6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_VidSendChar>
				G_u8_KPD_Pressed[Loc_u8_Counter]=Loc_u8_Key_Pressed;	//Store Pressed Key in The KeyPad Array
    1dea:	f7 01       	movw	r30, r14
    1dec:	e0 0f       	add	r30, r16
    1dee:	f1 1d       	adc	r31, r1
    1df0:	10 83       	st	Z, r17
				Loc_u8_Counter++;								//Increase Counter by one
    1df2:	0f 5f       	subi	r16, 0xFF	; 255
    1df4:	c0 cf       	rjmp	.-128    	; 0x1d76 <main+0x6e>

00001df6 <__mulsi3>:
    1df6:	62 9f       	mul	r22, r18
    1df8:	d0 01       	movw	r26, r0
    1dfa:	73 9f       	mul	r23, r19
    1dfc:	f0 01       	movw	r30, r0
    1dfe:	82 9f       	mul	r24, r18
    1e00:	e0 0d       	add	r30, r0
    1e02:	f1 1d       	adc	r31, r1
    1e04:	64 9f       	mul	r22, r20
    1e06:	e0 0d       	add	r30, r0
    1e08:	f1 1d       	adc	r31, r1
    1e0a:	92 9f       	mul	r25, r18
    1e0c:	f0 0d       	add	r31, r0
    1e0e:	83 9f       	mul	r24, r19
    1e10:	f0 0d       	add	r31, r0
    1e12:	74 9f       	mul	r23, r20
    1e14:	f0 0d       	add	r31, r0
    1e16:	65 9f       	mul	r22, r21
    1e18:	f0 0d       	add	r31, r0
    1e1a:	99 27       	eor	r25, r25
    1e1c:	72 9f       	mul	r23, r18
    1e1e:	b0 0d       	add	r27, r0
    1e20:	e1 1d       	adc	r30, r1
    1e22:	f9 1f       	adc	r31, r25
    1e24:	63 9f       	mul	r22, r19
    1e26:	b0 0d       	add	r27, r0
    1e28:	e1 1d       	adc	r30, r1
    1e2a:	f9 1f       	adc	r31, r25
    1e2c:	bd 01       	movw	r22, r26
    1e2e:	cf 01       	movw	r24, r30
    1e30:	11 24       	eor	r1, r1
    1e32:	08 95       	ret

00001e34 <__divmodsi4>:
    1e34:	97 fb       	bst	r25, 7
    1e36:	09 2e       	mov	r0, r25
    1e38:	05 26       	eor	r0, r21
    1e3a:	0e d0       	rcall	.+28     	; 0x1e58 <__divmodsi4_neg1>
    1e3c:	57 fd       	sbrc	r21, 7
    1e3e:	04 d0       	rcall	.+8      	; 0x1e48 <__divmodsi4_neg2>
    1e40:	14 d0       	rcall	.+40     	; 0x1e6a <__udivmodsi4>
    1e42:	0a d0       	rcall	.+20     	; 0x1e58 <__divmodsi4_neg1>
    1e44:	00 1c       	adc	r0, r0
    1e46:	38 f4       	brcc	.+14     	; 0x1e56 <__divmodsi4_exit>

00001e48 <__divmodsi4_neg2>:
    1e48:	50 95       	com	r21
    1e4a:	40 95       	com	r20
    1e4c:	30 95       	com	r19
    1e4e:	21 95       	neg	r18
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	4f 4f       	sbci	r20, 0xFF	; 255
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255

00001e56 <__divmodsi4_exit>:
    1e56:	08 95       	ret

00001e58 <__divmodsi4_neg1>:
    1e58:	f6 f7       	brtc	.-4      	; 0x1e56 <__divmodsi4_exit>
    1e5a:	90 95       	com	r25
    1e5c:	80 95       	com	r24
    1e5e:	70 95       	com	r23
    1e60:	61 95       	neg	r22
    1e62:	7f 4f       	sbci	r23, 0xFF	; 255
    1e64:	8f 4f       	sbci	r24, 0xFF	; 255
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	08 95       	ret

00001e6a <__udivmodsi4>:
    1e6a:	a1 e2       	ldi	r26, 0x21	; 33
    1e6c:	1a 2e       	mov	r1, r26
    1e6e:	aa 1b       	sub	r26, r26
    1e70:	bb 1b       	sub	r27, r27
    1e72:	fd 01       	movw	r30, r26
    1e74:	0d c0       	rjmp	.+26     	; 0x1e90 <__udivmodsi4_ep>

00001e76 <__udivmodsi4_loop>:
    1e76:	aa 1f       	adc	r26, r26
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	ee 1f       	adc	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	a2 17       	cp	r26, r18
    1e80:	b3 07       	cpc	r27, r19
    1e82:	e4 07       	cpc	r30, r20
    1e84:	f5 07       	cpc	r31, r21
    1e86:	20 f0       	brcs	.+8      	; 0x1e90 <__udivmodsi4_ep>
    1e88:	a2 1b       	sub	r26, r18
    1e8a:	b3 0b       	sbc	r27, r19
    1e8c:	e4 0b       	sbc	r30, r20
    1e8e:	f5 0b       	sbc	r31, r21

00001e90 <__udivmodsi4_ep>:
    1e90:	66 1f       	adc	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	1a 94       	dec	r1
    1e9a:	69 f7       	brne	.-38     	; 0x1e76 <__udivmodsi4_loop>
    1e9c:	60 95       	com	r22
    1e9e:	70 95       	com	r23
    1ea0:	80 95       	com	r24
    1ea2:	90 95       	com	r25
    1ea4:	9b 01       	movw	r18, r22
    1ea6:	ac 01       	movw	r20, r24
    1ea8:	bd 01       	movw	r22, r26
    1eaa:	cf 01       	movw	r24, r30
    1eac:	08 95       	ret

00001eae <__prologue_saves__>:
    1eae:	2f 92       	push	r2
    1eb0:	3f 92       	push	r3
    1eb2:	4f 92       	push	r4
    1eb4:	5f 92       	push	r5
    1eb6:	6f 92       	push	r6
    1eb8:	7f 92       	push	r7
    1eba:	8f 92       	push	r8
    1ebc:	9f 92       	push	r9
    1ebe:	af 92       	push	r10
    1ec0:	bf 92       	push	r11
    1ec2:	cf 92       	push	r12
    1ec4:	df 92       	push	r13
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	ca 1b       	sub	r28, r26
    1ed8:	db 0b       	sbc	r29, r27
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	09 94       	ijmp

00001ee6 <__epilogue_restores__>:
    1ee6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ee8:	39 88       	ldd	r3, Y+17	; 0x11
    1eea:	48 88       	ldd	r4, Y+16	; 0x10
    1eec:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eee:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ef0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ef2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ef4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ef6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ef8:	b9 84       	ldd	r11, Y+9	; 0x09
    1efa:	c8 84       	ldd	r12, Y+8	; 0x08
    1efc:	df 80       	ldd	r13, Y+7	; 0x07
    1efe:	ee 80       	ldd	r14, Y+6	; 0x06
    1f00:	fd 80       	ldd	r15, Y+5	; 0x05
    1f02:	0c 81       	ldd	r16, Y+4	; 0x04
    1f04:	1b 81       	ldd	r17, Y+3	; 0x03
    1f06:	aa 81       	ldd	r26, Y+2	; 0x02
    1f08:	b9 81       	ldd	r27, Y+1	; 0x01
    1f0a:	ce 0f       	add	r28, r30
    1f0c:	d1 1d       	adc	r29, r1
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	ed 01       	movw	r28, r26
    1f1a:	08 95       	ret

00001f1c <_exit>:
    1f1c:	f8 94       	cli

00001f1e <__stop_program>:
    1f1e:	ff cf       	rjmp	.-2      	; 0x1f1e <__stop_program>
